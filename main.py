#kivy.require("1.8.1")#Bruno#Iringanfrom kivy.app import App #create appfrom kivy.uix.label import Label  from kivy.uix.floatlayout import FloatLayout #import float layout/ framefrom kivy.uix.gridlayout import GridLayoutfrom kivy.uix.boxlayout import BoxLayoutfrom kivy.core.window import Windowfrom kivy.uix.button import Buttonfrom kivy.uix.label import Labelfrom kivy.uix.textinput import TextInputfrom kivy.uix.carousel import Carouselfrom kivy.uix.image import Imagefrom kivy.uix.popup import Popupfrom kivy.uix.screenmanager import ScreenManager, Screen,SwapTransition,FadeTransition, SlideTransitionfrom kivy.uix.dropdown import DropDownfrom kivy.uix.scrollview import ScrollViewimport datetimefrom garden import Graph, MeshLinePlot, SmoothLinePlotfrom kivy.core.window import Windowfrom kivy.uix.label import Labelfrom decimal import*from kivy.utils import get_color_from_hex as rgbfrom math import sinfrom textwrap import fillfrom kivy.core.text import Label as CoreLabelfrom functools import partialfrom plyer import batteryfrom datetime import timedeltafrom kivy.uix.slider import Slider#naive Classifier moduleimport naive_classifierimport sqlite3import reimport randomcon = sqlite3.connect("moodJournal.db")cursor = con.cursor()#print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M %p'))#cursor.execute("DROP table if exists user_account")#cursor.execute("CREATE TABLE user_info(id INTEGER PRIMARY KEY AUTOINCREMENT,thoughts_info text)")#cursor.execute("INSERT INTO user_account(password) VALUES('8888')")class NumRestrict(TextInput):    res = re.compile('[^0-9]')    def insert_text(self, substring, from_undo=False):        res = self.res        s = '%'.join([re.sub(res, '', s) for s in substring.split('%', 1)])        return super(NumRestrict, self).insert_text(s, from_undo=from_undo)class MainApp(App): #Inherited Class App    def open_settings(self):        pass        def on_pause(self):        return True        def on_resume(self):        pass    def hook_keyboard(self,window,key,*largs):        if key==27:            return True    def build(self):        #Global Variables        global color_val         color_val = 'blue'        cursor.execute('SELECT COUNT(*) FROM color_tbl')        color_count = cursor.fetchone()[0]        con.commit()        if color_count == 0:            cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")            con.commit()        elif color_count >= 1:                cursor.execute("SELECT color from color_tbl")                        color_val = cursor.fetchone()[0]            con.commit()        global mood_var        global gN        global d_now        global dYear        global dMonth        global dDay        global wplot        global wplot2        global wplot3        global mood_value        wplot = SmoothLinePlot(mode="points",color=rgb('76abe6'))        wplot2 = SmoothLinePlot(mode="points",color=rgb('ff6666'))        wplot3 = SmoothLinePlot(mode="points",color=rgb('faff66'))        dYear = ' '        dMonth = ' '        dDay = '01'        mood_value = 0              #Window.size = (400,700)        sm = ScreenManager() #ManagesForms        sc1 = Screen(name='firstscreen')        sc2 = Screen(name ='secondscreen')        sc3 = Screen(name = 'thirdscreen')        scmain= Screen(name = 'mainscreen')        sc4 =Screen(name = 'fourthscreen')        sc5 = Screen(name='fifthscreen')        sc6 = Screen(name='sixthscreen')        sc7 = Screen(name='seventhscreen')        sm.add_widget(sc1)        sm.add_widget(scmain)        sm.add_widget(sc3)        sm.add_widget(sc2)        sm.add_widget(sc4)        sm.add_widget(sc5)        sm.add_widget(sc6)        sm.add_widget(sc7)        #--SCREEN1-------------------------------------        root= FloatLayout(size_hint = (1.0, 1.0))        frontBg = Image(pos= root.pos,                   source="img/front.jpg",                   allow_stretch=True,                   keep_ratio=False)        mmlogo = Image(pos= root.pos,                   source="img/mmfront.png",            #img source                   allow_stretch=False,                   keep_ratio=False,                   pos_hint={'x':0,'center_y': .7}, #scalable position                   size_hint=(1,.9))                #scalable size        label_start = Label(text="[b]JOURNAL IT \nIN A SNAP[/b]\n[size=20sp]share what you feel \non the go[/size]",                     pos_hint={'x':.1,'center_y': .35},                     size_hint=(.5,.1),                            markup=True,                        font_size=(30))        bPopName = BoxLayout(orientation='vertical',padding=5,spacing = 5)        lblname= Label(text="[color=000000]Hi! What is your name?[/color]",                       markup=True,                              font_size='10sp')        tbName=TextInput()        buttonPopName = Button(text="Confirm",                               background_normal='img/blue.jpg')        popupname = Popup(title='',                        background='img/white.jpg',                          content=bPopName,                         auto_dismiss=False,                        size_hint=(0.8, 0.3))        #gender        bPopGender = BoxLayout(orientation='vertical',padding=5,spacing = 5)        lblgender= Label(text="[color=000000]Are you a Male or Female?[/color]",                       markup=True,                              font_size='10sp')        buttonPopGender1 = Button(text="Male",                               background_normal='img/blue.jpg')        buttonPopGender2 = Button(text="Female",                               background_normal='img/blue.jpg')        popupgender = Popup(title='',                        background='img/white.jpg',                          content=bPopGender,                         auto_dismiss=False,                        size_hint=(0.8, 0.3))        #help        bPopHelp = BoxLayout(orientation='vertical')        lblHelp= Label(text="[color=000000]<<< Swipe to left[/color]",                       markup=True,                       font_size='10sp')        tut1 = Image(source="img/tut1.jpg")        tut2 = Image(source="img/tut2.jpg")        tut3 = Image(source="img/tut3.jpg")        tut4 = Image(source="img/tut4.jpg")        carouselHelp = Carousel(direction='right')        btnHelp1 = Button(text="[color=ffffff]Okay, I got it![/color]",                          markup=True,                          pos_hint={'x':0.2,'center_y': 0.5},                          size_hint=(0.6, 0.4))        popuphelp = Popup(title='',                        background='img/white.jpg',                          content=bPopHelp,                         auto_dismiss=False,                        size_hint=(0.9, 0.8))        def popgender():            bPopGender.add_widget(lblgender)            bPopGender.add_widget(buttonPopGender1)            bPopGender.add_widget(buttonPopGender2)            popupgender.open()        def popname():               cursor.execute("SELECT COUNT(*) from user_account")               if cursor.fetchone()[0] == 0:                    bPopName.add_widget(lblname)                    bPopName.add_widget(tbName)                    bPopName.add_widget(buttonPopName)                    popupname.open()               else:                   pass                    def screen1():                 sm.transition = FadeTransition()            sc1.add_widget(root)            root.add_widget(frontBg)            root.add_widget(label_start)            root.add_widget(mmlogo)                                      screen1() #launches first screen        #-SCREEN2--------------------------------------        root2= FloatLayout(size_hint = (1.0, 1.0))        frontBg2 = Image(pos= root.pos,                   source="img/lock.jpg",                   allow_stretch=True,                   keep_ratio=False)        #popoutpin--        bPopPin = GridLayout(cols=2,row=2,padding=10,spacing = 5)        lblPin= Label(text="[color=000000]Enter PIN[/color]",markup=True)        lblPin2= Label(text="[color=000000]Re-enter PIN[/color]",markup=True)        lblDum= Label(text=" ")        tbPin1 = NumRestrict(password = True,                    password_mask ="*")        tbPin2 = NumRestrict(password = True,                    password_mask ="*")        buttonPopPin = Button(text="CONFIRM",                              background_normal='img/blue.jpg')        popupPin = Popup(title=' ',                        content=bPopPin,                         background='img/white.jpg',                         auto_dismiss=False,                        size_hint=(0.8, 0.3))        passimg1 = Button(pos= root.pos,                   text="[color=ffffff]1[/color]",                   font_size='30sp',                   markup=True,                   pos_hint={'x':0.2,'center_y': .6},                   font_name='helv.otf',                   background_color=[0,0,0,0.3],                          size_hint=(0.15,0.1))        passimg2 = Button(pos= root.pos,                   text="[color=ffffff]2[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                   background_color=[0,0,0,0.3],                       size_hint=(0.15,0.1),                   pos_hint={'x':0.45,'center_y': .6})        passimg3 = Button(pos= root.pos,                   text="[color=ffffff]3[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                   background_color=[0,0,0,0.3],                       pos_hint={'x':0.7,'center_y': .6},                    size_hint=(0.15,0.1))        passimg4 = Button(pos= root.pos,                   text="[color=ffffff]4[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                    background_color=[0,0,0,0.3],                       pos_hint={'x':0.2,'center_y': .45},                    size_hint=(0.15,0.1))        passimg5 = Button(pos= root.pos,                   text="[color=ffffff]5[/color]",                   font_size='30sp',                   markup=True,                    background_color=[0,0,0,0.3],                       font_name='helv.otf',                   pos_hint={'x':0.45,'center_y': .45},                    size_hint=(0.15,0.1))        passimg6 = Button(pos= root.pos,                   text="[color=ffffff]6[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                    background_color=[0,0,0,0.3],                       pos_hint={'x':0.7,'center_y': .45},                    size_hint=(0.15,0.1))        passimg7 = Button(pos= root.pos,                   text="[color=ffffff]7[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                    background_color=[0,0,0,0.3],                       pos_hint={'x':0.2,'center_y': .3},                    size_hint=(0.15,0.1))        passimg8 = Button(pos= root.pos,                   text="[color=ffffff]8[/color]",                   font_size='30sp',                   markup=True,                   background_color=[0,0,0,0.3],                       font_name='helv.otf',                   pos_hint={'x':0.45,'center_y': .3},                    size_hint=(0.15,0.1))        passimg9 = Button(pos= root.pos,                   text="[color=ffffff]9[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                    background_color=[0,0,0,0.3],                       pos_hint={'x':0.7,'center_y': .3},                    size_hint=(0.15,0.1))        passimgclr = Button(pos= root.pos,                   text="[color=ffffff]<[/color]",                   font_size='25sp',                   markup=True,                   font_name='helv.otf',                    background_color=[0,0,0,0.3],                       pos_hint={'x':0.2,'center_y': .15},                    size_hint=(0.15,0.1))        passimg0 = Button(pos= root.pos,                   text="[color=ffffff]0[/color]",                   font_size='30sp',                   markup=True,                   font_name='helv.otf',                   background_color=[0,0,0,0.3],                       pos_hint={'x':0.45,'center_y': .15},                    size_hint=(0.15,0.1))        passimgok =Button(pos= root.pos,                   text="[color=ffffff]OK[/color]",                   font_name='helv.otf',                   font_size='25sp',                   markup=True,                    background_color=[0,0,0,0.3],                       pos_hint={'x':0.7,'center_y': .15},                    size_hint=(0.15,0.1))        titlepin = Button(text="Enter PIN Code",                    pos_hint={'x':0,'center_y': 0.96},                    font_name='helv.otf',                    background_color=[0,0,0,0.3],                        font_size='25sp',                    size_hint=(1,.09))        txtInp2 = NumRestrict(pos_hint={'x':.2,'center_y': .8},                    font_name='helv.otf',                    size_hint=(.65,.1),                    foreground_color=[1,1,1,1],                    background_color=[0,0,0,0.5],                        font_size=(80),                                        password = True,                    password_mask ="*",                    readonly = True)        #--Screen3------------------------------------        root3= FloatLayout(size_hint = (1.0, 1.0))        frontBg3 = Image(pos= root.pos,                   source="img/white.jpg",                   allow_stretch=True,                   keep_ratio=False)        b_sc3menu = Button(text="T",                    font_name='IconsSouthSt.ttf',                    font_size='20sp',                    pos_hint={'x':0.02,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    size_hint=(.115,.09))        lblmood = Label(text="[color=000000]\nHow are you today?[/color]",                        markup=True,                        size_hint=(1, 0.3),                        font_size='20sp')        bPop33 = BoxLayout()        bPop3= BoxLayout(orientation="vertical",                          spacing=30,                          padding=10)        popup3 = Popup(title="",                       separator_color=[1,0,0,1],                       background="img/white.jpg",                       content=bPop3,                       auto_dismiss=False,                       size_hint=(0.9, 0.4))                         #popoutSave--        bPopSave = BoxLayout(orientation='vertical',padding=5,spacing = 5)        lblsave= Label(text="[color=000000]Log saved![/color]",                              font_size='15sp',                       markup=True)        buttonPopSave = Button(text="Ok",                               background_normal="img/"+color_val+".jpg")        popupsave = Popup(title='',                      separator_color=[1,0,0,0.5],                          background='img/white.jpg',                        content=bPopSave,                         auto_dismiss=False,                        size_hint=(0.8, 0.3))         #-------        bHappy=Label(text="[color=ffdf00]m[/color]",                    font_size='50sp',                    font_name='smile.ttf',                    markup=True,                     size_hint=(0.2, 1),                    background_color=[0,0,0,0],)        bHappy2=Label(text="[color=ffdf00]A[/color]",                    font_size='50sp',                    font_name='smile.ttf',                      size_hint=(0.2, 1),                    markup=True,                    background_color=[0,0,0,0],)        bHappy3=Label(text="[color=ffdf00]C[/color]",                    font_size='50sp',                    font_name='smile.ttf',                      size_hint=(0.2, 1),                    markup=True,                   background_color=[0,0,0,0],)        bSad=Label(text="[color=ffdf00]d[/color]",                    font_size='50sp',                    font_name='smile.ttf',                    markup=True,                   size_hint=(0.2,1),                    background_color=[0,0,0,0],)        bAngry=Label(text="[color=ffdf00]W[/color]",                    font_size='50sp',                    font_name='smile.ttf',                    markup=True,                     size_hint=(0.2, 1),                    background_color=[0,0,0,0])         b_sc3 = Button(text="[color=ffffff][b]SAVE LOG[b][/color]",                       markup=True,                       font_size='15sp',                    background_normal="img/"+color_val+".jpg",                       pos_hint={'x':.35,'center_y': .35},                    size_hint=(.3,.06))                        input_sc3 = TextInput(pos_hint={'x':.11,'center_y': .60},                    size_hint=(.8,.3),                    font_size='20sp')        titlewrite = Button(text="Write Log",                    font_size='25sp',                    pos_hint={'x':0,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    background_down="img/"+color_val+".jpg",                    size_hint=(1,.09))        label_write = Label(text="[color=ffffff][b]How is your day today?[/b][/color]",                     markup = True,                     pos_hint={'x':.45,'center_y': .83},                     size_hint=(.1,.1),                            font_size='20sp',                        size=(11,11))        btnSlider = Button(text='This is my mood',                            markup = True,                            background_normal="img/"+color_val+".jpg",                            #font_name='helv.otf',                            font_size='15sp',                            size_hint=(1,1),)        def my_callback(instance, value):            global mood_value            #print('Current volume level: %0.2f' % value)            mood_value = str('%0.2f' % value)        tryslide=Slider(value_track=True,                        min=-1,                        max=1,                        value_track_color=[1, 0, 0, 1],                        size_hint=(1, 0.3),                        )        tryslide.bind(value=my_callback)                                                    #Screen6------        root6= FloatLayout(size_hint = (1.0, 1.0))        frontBg6 = Image(pos= root.pos,                   source="img/coffee.jpg",                   allow_stretch=True,                   keep_ratio=False)        root6Title = Button(text="Home",                    #font_name='helv.otf',                    pos_hint={'x':0,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    background_down="img/"+color_val+".jpg",                    font_size='25sp',                    size_hint=(1,.09))        root6time = Label(text="[color=ffffff]"+datetime.datetime.now().strftime('%I:%M ')+"[/color]",                                font_name='helv.otf',                                      markup=True,                                pos_hint={'x':0.05,'center_y': 0.75},                                font_size='100sp',                                size_hint=(1,.095))        root6batt = Label(text="[color=ffffff][b]"+str(battery.status['percentage'])+"%[/b][/color]",                                font_name='helv.otf',                                      markup=True,                                pos_hint={'x':0.08,'center_y': 0.5825},                                font_size='20sp',                                size_hint=(1,.09))        root6lblbatt = Label(text="[color=ffffff]x[/color]",                                font_name='IconsSouthSt.ttf',                                      markup=True,                                pos_hint={'x':-0.05,'center_y': 0.6},                                font_size='30sp',                                size_hint=(1,.09))        root6lbldate = Label(text="[color=ffffff]"+datetime.datetime.now().strftime('%A %d %B %Y')+"[/color]",                                font_name='helv.otf',                                      markup=True,                                pos_hint={'x':0,'center_y': 0.63},                                font_size='20sp',                                size_hint=(1,.09))        #SCREEN7-------------------        root7= FloatLayout(size_hint = (1.0, 1.0))        frontBg7 = Image(pos= root.pos,                           source="img/white.jpg",                           allow_stretch=True,                           keep_ratio=False)        b_sc7menu =  Button(text="[color=000000]T[/color]",                            markup=True,                            font_name='IconsSouthSt.ttf',                            font_size='20sp',                            pos_hint={'x':0.02,'center_y': 0.96},                            background_normal="img/white.jpg",                            size_hint=(.115,.08))        userTitle = Button(text="[color=000000]User Garden[/color]",                            markup=True,                            pos_hint={'x':0,'center_y': 0.96},                            font_name='helv.otf',                                             background_normal="img/white.jpg",                            background_down="img/white.jpg",                            font_size='25sp',                            size_hint=(1,.09))        petalWhole = Image(pos= root.pos,                           source="img/flowerone.jpg",            #img source                           allow_stretch=False,                           keep_ratio=False,                           pos_hint={'x':0.05,'center_y': .45}, #scalable position                           size_hint=(.9,.7))                #scalable size        #--ScreenMain------------------------------------        #--sc5        root5= FloatLayout(size_hint = (1.0, 1.0))        frontBg5 = Image(pos= root.pos,                           source="img/white.jpg",                           allow_stretch=True,                           keep_ratio=False)        b_sc5menu =  Button(text="[color=000000]T[/color]",                            markup=True,                            font_name='IconsSouthSt.ttf',                            font_size='20sp',                            pos_hint={'x':0.02,'center_y': 0.96},                            background_normal="img/white.jpg",                            size_hint=(.115,.08))        recentTitle = Button(text="[color=000000]Logs History[/color]",                            markup=True,                            pos_hint={'x':0,'center_y': 0.96},                            font_name='helv.otf',                                             background_normal="img/white.jpg",                            background_down="img/white.jpg",                            font_size='25sp',                            size_hint=(1,.09))               grid5_history=GridLayout(cols=1,                                     spacing =20,                                        padding=30,                                        size_hint_y=None,                                        pos_hint={'center_x':.5, 'center_y':.5})        grid5_history.bind(minimum_height=grid5_history.setter('height'))        sv5_history=ScrollView(size_hint=(1,.75),                                      pos_hint={'center_x':.5, 'center_y':.45})                #scmain        rootmain= FloatLayout(size_hint = (1.0, 1.0))        grid_history=GridLayout(cols=1,                                padding=30,                                spacing =20,                                size_hint_y=None,                                pos_hint={'center_x':.5, 'center_y':.48})        grid_history.bind(minimum_height=grid_history.setter('height'))        sv_history=ScrollView(size_hint=(0.9,.8),                              pos_hint={'center_x':.5, 'center_y':.45})                        frontBgmain = Image(pos= root.pos,                   source="img/trees.jpg",                   allow_stretch=True,                   keep_ratio=False)        b_scmainmenu = Button(text="T",                    font_name='IconsSouthSt.ttf',                    font_size='20sp',                    pos_hint={'x':0.02,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    size_hint=(.115,.09))        #Get name from database Limit 1 for 1 user only        cursor.execute("SELECT COUNT(*) FROM user_account")        if cursor.fetchone()[0] == 0:            _name = 'guest'        else:            cursor.execute("SELECT name from user_account LIMIT 1")            _name = cursor.fetchone()[0]        con.commit()        bPop = BoxLayout(orientation='vertical',padding=5,spacing = 5)        cursor.execute("SELECT COUNT(*) FROM tipsTbl")        tips_count = cursor.fetchone()[0]        con.commit()        tips_n = random.randrange(1,tips_count)        cursor.execute("SELECT tips_info from tipsTbl WHERE tips_id="+str(tips_n) )        tips = cursor.fetchone()[0]        con.commit()        bPop.add_widget(Label(text="[color=000000]DAILY TIP\n\n"+str(tips)+"\n[/color]",                              font_size='11sp',halign='center',                        markup=True,                        size_hint=(1,.8)))        buttonPop = Button(text="Close",                           background_normal="img/roundblue.jpg",                           size_hint=(1,.2))                                  bPop.add_widget(buttonPop)        popup = Popup(title='',separator_color=[1,0,0,0.5],                        content=bPop,                         background="img/white.jpg",                         auto_dismiss=False,                        size_hint=(0.8, 0.3))        #popoutexit--        bPopExit = BoxLayout(orientation='vertical',padding=5)        bPopExit2 = BoxLayout(orientation='horizontal', padding=5,spacing=10)        lblexit= Label(text="[color=000000]\n \n Are you sure you want to exit?[/color]",                       markup=True,                              font_size='15sp',size_hint=(1,.5))        buttonPopExit1 = Button(text="Yes",                                size_hint=(.5,.3),                                background_normal="img/roundblue.jpg")        buttonPopExit2 = Button(text="No",                                size_hint=(.5,.3),                                background_normal="img/roundblue.jpg")        popupexit = Popup(background="img/white.jpg",                      separator_color=[1,0,0,0.5],                          title="",                        content=bPopExit,                         auto_dismiss=True,                        size_hint=(0.8, 0.3))         #popoutAbout--        bPopAb = GridLayout(cols=1,padding=5,spacing = 5)        lblabout= Label(text="[color=000000]Mood Memoir is a\n*Virtual Temperament Journal\n*Diary Archive \n*Monitor your moods"                    +"[/color]",                        markup=True,halign='center',                        size_hint=(1,.5),                              font_size='10sp')        buttonPopAb = Button(text="Close",                             size_hint=(.5,.2),                             background_normal="img/roundblue.jpg")        popupabout = Popup(background="img/white.jpg",                      separator_color=[1,0,0,0.5],                        content=bPopAb,                           title="About Mood Memoir",                         auto_dismiss=False,title_color=[0,0,0,1],                        size_hint=(0.8, 0.4))         #popoutDev--        bPopD = GridLayout(cols=2,padding=5,spacing = 5)        lblDev1= Label(text="[color=000000]Jomari R. Iringan[/color]",                       #font_name='helv.otf',                       markup=True,                       font_size='12sp',                       size_hint=(1,.2))        lblDev2= Label(text="[color=000000]Lamberto A. Bruno, Jr.[/color]",                     # font_name='helv.otf',                       markup=True,                       font_size='12sp')        imgBruno = Image(source="img/bruno.png",                   size_hint=(1,1),                         height=150,                   allow_stretch=True)        imgJoms = Image(source="img/joms.png",                   size_hint=(1,1),                        allow_stretch=True)        lbldevblank = Label(size_hint=(.1,.1))        buttonPopD = Button(text="Close",                            #font_name='helv.otf',                                background_normal="img/roundblue.jpg",                    size_hint=(.1,.2))        popupDev = Popup(background="img/white.jpg",                         title="",                      separator_color=[1,0,0,0.5],                        content=bPopD,                         auto_dismiss=False,                        size_hint=(0.8, 0.6))        #popoutColor----        bPopColor= GridLayout(cols=1,padding=5,spacing = 5)        buttonColorRed = Button(text="Red",                           # font_name='helv.otf',                                background_normal="img/red.jpg",                    size_hint=(.1,.2))        buttonColorBlue = Button(text="Blue",                            #font_name='helv.otf',                                background_normal="img/blue.jpg",                    size_hint=(.1,.2))        buttonColorGreen = Button(text="Green",                            #font_name='helv.otf',                                background_normal="img/green.jpg",                    size_hint=(.1,.2))        buttonColorOrange = Button(text="Orange",                           # font_name='helv.otf',                                background_normal="img/orange.jpg",                    size_hint=(.1,.2))        buttonColorPurple = Button(text="Purple",                            #font_name='helv.otf',                                background_normal="img/purple.jpg",                    size_hint=(.1,.2))        buttonColorPRed = Button(text="Pastel Red",                           # font_name='helv.otf',                                 markup=True,                                background_normal="img/pred.jpg",                    size_hint=(.1,.2))        buttonColorPBlue = Button(text="Pastel Blue",                           # font_name='helv.otf',                                  markup=True,                                background_normal="img/pblue.jpg",                    size_hint=(.1,.2))        buttonColorPGreen = Button(text="Pastel Green",                           # font_name='helv.otf',                                   markup=True,                                background_normal="img/pgreen.jpg",                    size_hint=(.1,.2))        buttonColorPOrange = Button(text="Pastel Orange",                            #font_name='helv.otf',                                    markup=True,                                background_normal="img/porange.jpg",                    size_hint=(.1,.2))        buttonColorPPurple = Button(text="Pastel Purple",                           #font_name='helv.otf',                                    markup=True,                                background_normal="img/ppurple.jpg",                    size_hint=(.1,.2))                        buttonPopColor = Button(text="Close",                           # font_name='helv.otf',                                background_normal="img/roundblue.jpg",                    size_hint=(.1,.2))        popupColor = Popup(background="img/white.jpg",                           title="",                      separator_color=[1,0,0,0.5],                        content=bPopColor,                         auto_dismiss=False,                        size_hint=(0.8, 0.8))             #popoutCP--        bPopCp = GridLayout(cols=2,row=2,padding=10,spacing = 5)        lblCp1= Label(text="[color=000000]Enter Old PIN[/color]",                      markup=True,                      size_hint=(1,.3))                      #font_name='helv.otf')        lblCp2= Label(text="[color=000000]Enter New PIN[/color]",                      size_hint=(1,.3),                      markup=True)                      #font_name='helv.otf')        lblCp3= Label(text="[color=000000]Re-enter New PIN[/color]",                      size_hint=(1,.3),                      markup=True)                      #font_name='helv.otf')        lblblank= Label(text="",                        #font_name='helv.otf',                        size_hint=(1,.3))        lblnotice= Label(text="",                        # font_name='helv.otf',                         font_size='13sp',                         size_hint=(1,.2))        tbCp1 = NumRestrict(password = True,                            size_hint=(1,.3),                           # font_name='helv.otf',                    password_mask ="*")        tbCp2 = NumRestrict(password = True,                            size_hint=(1,.3),                            #font_name='helv.otf',                    password_mask ="*")        tbCp3 = NumRestrict(password = True,                            size_hint=(1,.3),                            #font_name='helv.otf',                    password_mask ="*")        buttonPopCpExit=Button(text="CLOSE",                     # font_name='helv.otf',                             size_hint=(.1,.2),                                background_normal="img/roundblue.jpg")        buttonPopCp = Button(text="CONFIRM",                     # font_name='helv.otf',                             size_hint=(.1,.2),                             background_normal="img/roundblue.jpg")                                    popupCp = Popup(title="",                        separator_color=[1,0,0,0.5],                        content=bPopCp,                        background="img/white.jpg",                                                 auto_dismiss=False,                        size_hint=(0.8, 0.4))        #-------        b_logs = Button(text="[color=ffffff]D[/color]",                    font_size='30sp',                    font_name='trees.ttf',                    pos_hint={'x':0.22,'center_y': 0.065},                    background_color=[0,0,0,0],                    markup=True,                    size_hint=(.3,.1))        b_home = Label(text="[color=5e8ac9]D[/color]",                    font_size='32sp',                    font_name='IconsSouthSt.ttf',                    pos_hint={'x':0.007,'center_y': 0.072},                    markup=True,                    size_hint=(.3,.1))        logsTitle = Button(text="Recent Logs",                    #font_name='helv.otf',                    pos_hint={'x':0,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    background_down="img/"+color_val+".jpg",                    font_size='25sp',                    size_hint=(1,.09))        lblHome = Label(text="[color=5e8ac9][b]Home[/b][/color]",                    font_size='15sp',                    #font_name='helv.otf',                    pos_hint={'x':0.007,'center_y': 0.015},                    markup=True,                    size_hint=(.3,.1))        lblStat= Label(text="[color=ffffff]Stats[/color]",                    font_size='15sp',                    #font_name='helv.otf',                    pos_hint={'x':0.74,'center_y': 0.015},                    markup=True,                    size_hint=(.3,.1))        lblLogs = Label(text="[color=ffffff]Logs[/color]",                    font_size='15sp',                    #font_name='helv.otf',                   pos_hint={'x':0.22,'center_y': 0.015},                    markup=True,                    size_hint=(.3,.1))        lblWrite = Label(text="[color=ffffff]Write[/color]",                    font_size='15sp',                    #font_name='helv.otf',                    pos_hint={'x':0.48,'center_y': 0.015},                    markup=True,                    size_hint=(.3,.1))        b_write = Button(text="[color=ffffff][b]h[/b][/color]",                    font_size='29sp',                    font_name='IconsSouthSt.ttf',                    pos_hint={'x':0.5,'center_y': 0.068},                    markup=True,                    background_color=[0,0,0,0],                    size_hint=(.3,.1))        b_stats = Button(text="[color=ffffff]W[/color]",                    font_size="33sp",                    font_name='IconsSouthSt.ttf',                    pos_hint={'x':0.74,'center_y': 0.07},                    markup=True,                    background_color=[0,0,0,0],                    size_hint=(.3,.1))        b_user= Button(text="[color=ffffff]W[/color]",                    font_size="33sp",                    font_name='IconsSouthSt.ttf',                    pos_hint={'x':0.74,'center_y': 0.4},                    markup=True,                    background_color=[0,0,0,0],                    size_hint=(.3,.1))        lblUser = Label(text="[color=ffffff]User[/color]",                    font_size='15sp',                    #font_name='helv.otf',                    pos_hint={'x':0.74,'center_y': 0.35},                    markup=True,                    size_hint=(.3,.1))                dropdown = DropDown()        btnCP = Button(text='[color=ffffff]Change PIN[/color]',                       #ont_name='helv.otf',                       font_size='11sp',                       markup = True,                       background_normal = "img/"+color_val+".jpg",                       size_hint=(1,None),                       height=100)        btnCP.bind(on_release=lambda btn: dropdown.select(btn.text))        btnColor = Button(text='[color=ffffff]Color Scheme[/color]',                       #font_name='helv.otf',                       font_size='11sp',                       markup = True,                       background_normal = "img/"+color_val+".jpg",                       size_hint=(1,None),                       height=100)        btnColor.bind(on_release=lambda btn: dropdown.select(btn.text))                btnCons = Button(text='[color=ffffff]Consultant Mode[/color]',                      #font_name='helv.otf',                      font_size='11sp',                      markup = True,                      background_normal = "img/"+color_val+".jpg",                      size_hint=(1,None),                      height=100)                btnCons.bind(on_release=lambda btn: dropdown.select(btn.text))        btnHelp = Button(text='[color=ffffff]How-To[/color]',                      #font_name='helv.otf',                      font_size='15sp',                      markup = True,                      background_normal = "img/"+color_val+".jpg",                      size_hint=(1,None),                      height=100)                btnHelp.bind(on_release=lambda btn: dropdown.select(btn.text))                btnD = Button(text='[color=ffffff]Developers[/color]',                      #font_name='helv.otf',                      font_size='11sp',                      markup = True,                      background_normal = "img/"+color_val+".jpg",                      size_hint=(1,None),                      height=100)                btnD.bind(on_release=lambda btn: dropdown.select(btn.text))        btnA = Button(text='[color=ffffff]About[/color]',                      font_size='11sp',                     # font_name='helv.otf',                      size_hint=(1,None),                      markup = True,                      background_normal = "img/"+color_val+".jpg",                      height=100)        btnA.bind(on_release=lambda btn: dropdown.select(btn.text))        btnLO = Button(text='[color=ffffff]Log Out[/color]',                       #font_name='helv.otf',                       font_size='15sp',                       markup = True,                       background_normal = "img/"+color_val+".jpg",                       size_hint=(1,None),                       width=50,                       height=100)                btnLO.bind(on_release=lambda btn: dropdown.select(btn.text))        # create a big main button        mainbutton = Button(text='[b]::[/b]',                            markup=True,                            font_size='20sp',                            background_normal="img/"+color_val+".jpg",                            size_hint=(.25,.085),                            pos_hint={'x':0,'center_y': .96})        # show the dropdown menu when the main button is released        # note: all the bind() calls pass the instance of the caller (here, the        # mainbutton instance) as the first argument of the callback (here,        # dropdown.open.).        mainbutton.bind(on_press=dropdown.open)        mainbutton.bind(on_release=dropdown.open)                # one last thing, listen for the selection in the dropdown list and        # assign the data to the button text.         #dropdown.bind(on_select=lambda instance, x: setattr(mainbutton, 'text', x))        lbltest = Label(text="[color=ffffff]How are you today?[/color]",                      markup = True)        #------Screen4--------------------------        root4= FloatLayout(size_hint = (1.0, 1.0))        frontBg4 = Image(pos= root.pos,                   source="img/white.jpg",                   allow_stretch=True,                   keep_ratio=False)        lblDescript = Label(text="[color=000000]LEGEND\n[/color]"+"[color=76abe6]Blue line[/color]"+"[color=393d42] Positive Score\n"+"[color=ff0000]Red line[/color]"+" Negative Score[/color]",                           font_size='11sp',                            size_hint=(.20,.05),                            markup=True,                             pos_hint={'center_x':.18,'center_y':0.35})        lblTemp = Label(text="[color=000000]Result:[/color]"+"[color=393d42][/color]",                       font_size='11sp',                        size_hint=(.25,.05),                        markup=True,pos_hint={'x':.37,'center_y':0.05}                         )        petalG = Image(pos= root.pos,           source="img/flowerone.jpg",            #img source           allow_stretch=False,           keep_ratio=False,           pos_hint={'x':0.05,'center_y': .45}, #scalable position           size_hint=(.9,.7))                #scalable size        boxStats = BoxLayout(size_hint=(0.85,0.4),                             pos_hint={'center_x':.45, 'center_y':.6})        btnCont = Button(text=">",                         size_hint=(0.08,0.05),                        pos_hint={'center_x':.93, 'center_y':.6})        #boxStats.bind(minimum_width=boxStats.setter('width'))              gridData = GridLayout(cols=4,                              padding=10,                              spacing=30,                              size_hint_y = None,                              size_hint_x = 1,                               pos_hint={'center_x':.6, 'center_y':.5})        gridData.bind(minimum_height=gridData.setter('height'))        scrollData=ScrollView(size_hint=(.52,.3),                                      pos_hint={'center_x':.7, 'center_y':.24})                        #graph dropdown        graphDown = DropDown()        btnDaily = Button(text="[color=ffffff]Daily Stats[/color]",                          font_size='14sp',                          markup=True,                          #font_name='helv.otf',                          background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)        btnDaily.bind(on_release=lambda btn: graphDown.select(btn.text))        btnWeekly = Button(text="[color=ffffff]Weekly Stats[/color]",                           font_size='14sp',                           #font_name='helv.otf',                           markup=True,                          background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)        btnWeekly.bind(on_release=lambda btn: graphDown.select(btn.text))        btnMonthly = Button(text="[color=ffffff]Monthly Stats[/color]",                            font_size='13sp',                            #font_name='helv.otf',                            markup=True,                          background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)        btnMonthly.bind(on_release=lambda btn: graphDown.select(btn.text))        btnAnnual = Button(text="[color=ffffff]Annual Stats[/color]",                            font_size='14sp',                            #font_name='helv.otf',                            markup=True,                          background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)        btnAnnual.bind(on_release=lambda btn: graphDown.select(btn.text))        graphButton = Button(text='View Stats',                             #font_name = 'helv.otf',                             font_size='15sp',                             background_normal="img/"+color_val+".jpg",                             size_hint=(.25,.05),                             pos_hint={'x':.7,'center_y':0.85})        graphButton.bind(on_press=graphDown.open)        graphButton.bind(on_release=graphDown.open)                        b_sc4menu =  Button(text="T",                    font_name='IconsSouthSt.ttf',                    font_size='20sp',                    pos_hint={'x':0.02,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    size_hint=(.115,.09))        statsTitle = Button(text="User Garden",                    #font_name = 'helv.otf',                            pos_hint={'x':0,'center_y': 0.96},                    background_normal="img/"+color_val+".jpg",                    background_down="img/"+color_val+".jpg",                    font_size='25sp',                    size_hint=(1,.09))        btnHelpGraph =  Button(text="[color=ffffff][b]What does the image mean?[/b][/color]",                    markup=True,                    background_normal="img/"+color_val+".jpg",                    pos_hint={'x':0.15,'center_y': 0.06},                    font_size='15sp',                    size_hint=(0.7,.05))        popBoxLay = BoxLayout(orientation='vertical')        popuphelpme= Popup(title='',                      separator_color=[0,0,1,0.5],                        background='img/white.jpg',                          content=popBoxLay,                         auto_dismiss=False,                        size_hint=(0.8, 0.6))        lblhelpme = Label(text="[color=000000]    The image represents the positivity\n    progress of you.\n    The images has birds, flowers, petals\n    (depends on your gender)\n    that is total to 10% each, which will represent\n    the positivity in terms of Daily, Weekly,\n    Monthly and Annual progress.\n\n    Ex: 8 birds/flowers/petals will represent\n    80% positivity.[/color]",                          markup=True,                          font_size='13sp')        btnhelpmeok = Button(text="Close",                             background_normal="img/"+color_val+".jpg",                             size_hint=(0.3, 0.1),                             pos_hint={'x':0.355,'center_y': 0.01},                            )        def helpme(self,*args):            popBoxLay.add_widget(lblhelpme)            popBoxLay.add_widget(btnhelpmeok)            popuphelpme.open()        def closehelpme(self,*args):            popBoxLay.remove_widget(lblhelpme)            popBoxLay.remove_widget(btnhelpmeok)            popuphelpme.dismiss()                    btnHelpGraph.bind(on_press=helpme)        btnhelpmeok.bind(on_press=closehelpme)        #DayWidget        dropdownDay = DropDown()        btnd1 = Button(text='[color=ffffff]1[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                           size_hint=(1,None),                           height=50)        btnd1.bind(on_release=lambda btn: dropdownDay.select(btn.text))        btnd2 = Button(text='[color=ffffff]2[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnd2.bind(on_release=lambda btn: dropdownDay.select(btn.text))                    btnDayDay= Button(text='[color=ffffff]Day v[/color]',                                markup=True,                                #font_name = 'helv.otf',                             font_size='15sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.13,.05),                                pos_hint={'x':0.37,'center_y': 0.85})                    dropdownYearDay=DropDown()        #dropdownYearDay.bind(on_select=lambda instance, x: setattr(btndy1, 'text', x))        btndy1 = Button(text='[color=ffffff]2016[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                           size_hint=(1,None),                           height=50)        #btndy1.bind(on_release=lambda btn: dropdownYearDay.select(btn.text))        btndy2 = Button(text='[color=ffffff]2017[/color]',                          # font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btndy2.bind(on_release=lambda btn: dropdownYearDay.select(btn.text))                    btnYearDay= Button(text='[color=ffffff]Year v[/color]',                                markup=True,                             #font_name = 'helv.otf',                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.13,.05),                                pos_hint={'x':0.05,'center_y': 0.85})        dropdownYearMonth=DropDown()                    btnmy11 = Button(text='[color=ffffff]Jan[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                           size_hint=(1,None),                           height=50)        btnmy11.bind(on_release=lambda btn: dropdownYearMonth.select(btn.text))        btnmy22 = Button(text='[color=ffffff]Feb[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnmy22.bind(on_release=lambda btn: dropdownYearMonth.select(btn.text))                    btnMonthDay= Button(text='[color=ffffff]Month v[/color]',                                markup=True,                               # font_name = 'helv.otf',                             font_size='15sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.15,.05),                                pos_hint={'x':0.20,'center_y': 0.85})                                btnDayDay.bind(on_press=dropdownDay.open)        btnDayDay.bind(on_release=dropdownDay.open)        btnYearDay.bind(on_press=dropdownYearDay.open)        btnYearDay.bind(on_release=dropdownYearDay.open)        btnMonthDay.bind(on_press=dropdownYearMonth.open)        btnMonthDay.bind(on_release=dropdownYearMonth.open)        #WeekWidgets        dropdownWeekDay = DropDown()        btnwd1 = Button(text='[color=ffffff]1[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                           size_hint=(1,None),                           height=50)        btnwd1.bind(on_release=lambda btn: dropdownWeekDay.select(btn.text))                    btnWeekDay= Button(text='[color=ffffff]Day v[/color]',                                markup=True,                                #font_name = 'helv.otf',                             font_size='15sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.13,.05),                                pos_hint={'x':0.37,'center_y': 0.85})                    dropdownWeekYear=DropDown()        btnwy1 = Button(text='[color=ffffff]2017[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnwy1.bind(on_release=lambda btn: dropdownWeekYear.select(btn.text))                    btnWeekYear= Button(text='[color=ffffff]Year v[/color]',                                markup=True,                             #font_name = 'helv.otf',                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.13,.05),                                pos_hint={'x':0.05,'center_y': 0.85})        dropdownWeekMonth=DropDown()        btnwm1 = Button(text='[color=ffffff]Feb[/color]',                           #font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnwm1.bind(on_release=lambda btn: dropdownWeekMonth.select(btn.text))                    btnWeekMonth= Button(text='[color=ffffff]Month v[/color]',                                markup=True,                                #font_name = 'helv.otf',                             font_size='15sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.15,.05),                                pos_hint={'x':0.20,'center_y': 0.85})                                btnWeekDay.bind(on_press=dropdownWeekDay.open)        btnWeekDay.bind(on_release=dropdownWeekDay.open)        btnWeekYear.bind(on_press=dropdownWeekYear.open)        btnWeekYear.bind(on_release=dropdownWeekYear.open)        btnWeekMonth.bind(on_press=dropdownWeekMonth.open)        btnWeekMonth.bind(on_release=dropdownWeekMonth.open)                #MonthWidgets        dropdownMonth = DropDown()        btnmm1 = Button(text='[color=ffffff]Jul[/color]',                          # font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                           size_hint=(1,None),                           height=50)        btnmm1.bind(on_release=lambda btn: dropdownMonth.select(btn.text))        btnmm2 = Button(text='[color=ffffff]Jun[/color]',                          # font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnmm2.bind(on_release=lambda btn: dropdownMonth.select(btn.text))        dropdownMonthYear = DropDown()        btnmy1 = Button(text='[color=ffffff]2017[/color]',                          ## font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                           size_hint=(1,None),                           height=50)        btnmy1.bind(on_release=lambda btn: dropdownMonthYear.select(btn.text))        btnmy2 = Button(text='[color=ffffff]2016[/color]',                          # font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnmy2.bind(on_release=lambda btn: dropdownMonthYear.select(btn.text))                    btnMon1= Button(text='[color=ffffff]Year v[/color]',                                markup=True,                             #font_name = 'helv.otf',                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.25,.05),                                pos_hint={'x':0.05,'center_y': 0.85})        btnMon2= Button(text='[color=ffffff]Month v[/color]',                                markup=True,                              #  font_name = 'helv.otf',                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.25,.05),                                pos_hint={'x':0.35,'center_y': 0.85})                    btnMon1.bind(on_press=dropdownMonth.open)        btnMon1.bind(on_release=dropdownMonth.open)        btnMon2.bind(on_press=dropdownMonthYear.open)        btnMon2.bind(on_release=dropdownMonthYear.open)        #annual        dropdownAnnual=DropDown()                    btnann1 = Button(text='[color=ffffff]1988[/color]',                          # font_name = 'helv.otf',                            markup=True,                             font_size='12sp',                             background_normal="img/"+color_val+".jpg",                          size_hint=(1,None),                          height=50)                    btnann1.bind(on_release=lambda btn: dropdownAnnual.select(btn.text))                    btnAnnualYear= Button(text='[color=ffffff]Year v[/color]',                                markup=True,                            #    font_name = 'helv.otf',                             font_size='15sp',                             background_normal="img/"+color_val+".jpg",                                size_hint=(.15,.05),                                pos_hint={'x':0.05,'center_y': 0.85})                                btnAnnualYear.bind(on_press=dropdownAnnual.open)        btnAnnualYear.bind(on_release=dropdownAnnual.open)                def addWidgetsHis():            root4.add_widget(btnAnnualYear)            dropdownAnnual.add_widget(btnann1)                        root4.add_widget(btnWeekDay)            dropdownWeekDay.add_widget(btnwd1)            root4.add_widget(btnWeekYear)            dropdownWeekYear.add_widget(btnwy1)            root4.add_widget(btnWeekMonth)            dropdownWeekMonth.add_widget(btnwm1)                        root4.add_widget(btnMon1)            root4.add_widget(btnMon2)            dropdownMonth.add_widget(btnmm1)            dropdownMonth.add_widget(btnmm2)            dropdownMonthYear.add_widget(btnmy1)            dropdownMonthYear.add_widget(btnmy2)                        root4.add_widget(btnDayDay)            dropdownDay.add_widget(btnd1)            dropdownDay.add_widget(btnd2)            root4.add_widget(btnYearDay)            dropdownYearDay.add_widget(btndy1)            dropdownYearDay.add_widget(btndy2)            root4.add_widget(btnMonthDay)            dropdownYearMonth.add_widget(btnmy11)            dropdownYearMonth.add_widget(btnmy22)                         global d_now        d_now = datetime.datetime.now().strftime('%Y-%m-%d')        d_now_s = d_now.split('-')        cursor.execute("SELECT COUNT(*) FROM user_info WHERE year=? AND month=? AND day=?",(d_now_s[0], d_now_s[1], d_now_s[2]))        global _x_max        global cb_ctr        _x_max = int(cursor.fetchone()[0])        #print _x_max        con.commit()        graph_theme = {            'label_options': {                'color': rgb('000000'),  # color of tick labels and titles                'bold': True}}        global nGraph        nGraph = Graph(xlabel='Daily',                      ylabel='Polarity Values',                      x_ticks_minor=1,                      x_ticks_major=1,                      y_ticks_minor=0,                      y_ticks_major=0.20,                      y_grid_label=True,                      tick_color=(0,0,0,1),                      border_color=(0,0,0,1),                                            x_grid_label=True,                      padding=5,                      x_grid=False,                      y_grid=False,                      xmin=0,                      xmax=_x_max,                      ymin=0,font_size='10sp',                      ymax=1,                       **graph_theme)        #start        def startGraphPlot(self, *args):            #dito maglagay                                        gridData.clear_widgets()            gridData.add_widget(Button(text="[color=000000]Date[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))            gridData.add_widget(Button(text="[color=000000]Time[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))            gridData.add_widget(Button(text="[color=000000]P_POS[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))            gridData.add_widget(Button(text="[color=000000]P_NEG[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                         if len(nGraph.plots) >= 1:                for plots in nGraph.plots:                    nGraph.remove_plot(plots)                    nGraph._clear_buffer()                    #nGraph.xlabel = 'Daily'            d_now = datetime.datetime.now().strftime('%Y-%m-%d')            d_now_s = d_now.split('-')            cursor.execute("SELECT COUNT(*) FROM user_info")            if int(cursor.fetchone()[0]) == 0:                return            con.commit()            cursor.execute("SELECT COUNT(*) FROM user_info WHERE year=? AND month=? AND day=?",(d_now_s[0], d_now_s[1], d_now_s[2]))            _x_max = int(cursor.fetchone()[0])            minus = 1            while _x_max == 0:                d_now = datetime.datetime.strftime(datetime.datetime.now() - timedelta(minus), '%Y-%m-%d')                d_now_s = d_now.split('-')                cursor.execute("SELECT COUNT(*) FROM user_info WHERE year=? AND month=? AND day=?",(d_now_s[0], d_now_s[1], d_now_s[2]))                _x_max = int(cursor.fetchone()[0])                minus+=1            con.commit()            nGraph.xmax = _x_max            if _x_max >=12 and _x_max <= 24:                nGraph.x_ticks_major=3            elif _x_max >=25 and _x_max <=36:                nGraph.x_ticks_major = 6            elif _x_max >=37:                n_Graph.x_ticks_major = int(_x_max*20)            #print _x_max            wplot = SmoothLinePlot(mode="points",color=rgb('76abe6'))            wplot2 = SmoothLinePlot(mode="points",color=rgb('ff6666'))            #wplot3 = SmoothLinePlot(mode="points",color=rgb('faff66'))            #faff66                        cursor.execute("SELECT pos,neg,time FROM user_info WHERE year=? AND month=? AND day=?",(d_now_s[0], d_now_s[1], d_now_s[2]))            plot_pts = [(0,0)]            plot_pts2 = [(0,0)]            plot_pts3 = [(0,0)]            p_total = 0            n_total = 0            #nplot_pts = [(0,-1)]            pola = cursor.fetchall()            #print pola            for m in range(0,len(pola),1):                temp = float(pola[m][0])                temp2 =  float(pola[m][1])                 p_total +=float(pola[m][0])                n_total +=float(pola[m][1])                gridData.add_widget(Button(text="[color=000000]"+str(d_now_s[1])+' '+str(d_now_s[2])+' '+str(d_now_s[0])+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]"+str(pola[m][2])+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]"+str('%.2f' % float(pola[m][0]))+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]"+str('%.2f' % float(pola[m][1]))+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                #print 'POS:{0} NEG:{1}'.format(temp,temp2)                dd = (m+1,temp)                dd2 = (m+1,temp2)                                if temp>temp2:                    dd3 = (m+1,temp-temp2)                elif temp2>temp:                    dd3 = (m+1,temp2-temp)                plot_pts.append(dd)                plot_pts2.append(dd2)                plot_pts3.append(dd3)                        petal_val = result_precision(float(p_total/len(pola)))            petal_val = float(petal_val) * 100            con.commit()            cursor.execute("SELECT gender from user_account LIMIT 1")            gender_t = cursor.fetchone()[0]            con.commit()            if gender_t == 'Male':                gN = 'wire'            if gender_t == 'Female':                gN = 'flower'            if  petal_val <=0.00:                petalG.source="img/"+gN+"zero.jpg"                  if  petal_val>= 1.00 and petal_val <= 10:                petalG.source="img/"+gN+"one.jpg"            if petal_val >= 11.00 and petal_val<= 20.00:                petalG.source="img/"+gN+"two.jpg"            if petal_val >= 21.00 and petal_val<= 30.00:                petalG.source="img/"+gN+"three.jpg"            if petal_val >= 31.00 and petal_val <= 40.00:                petalG.source="img/"+gN+"four.jpg"            if petal_val >= 41.00 and petal_val <= 50.00:                petalG.source="img/"+gN+"five.jpg"            if petal_val >= 51.00 and petal_val <= 60.00:                petalG.source="img/"+gN+"six.jpg"            if petal_val >= 61.00 and petal_val <= 70.00:                petalG.source="img/"+gN+"seven.jpg"            if petal_val >= 71.00 and petal_val < 80.00:                petalG.source="img/"+gN+"eight.jpg"            if petal_val >= 81.00 and petal_val <= 90.00:                petalG.source="img/"+gN+"nine.jpg"            if petal_val >= 91.00 and petal_val <= 100.00:                petalG.source="img/"+gN+"whole.jpg"                        lblTemp.text = "[color=000000]Average:[/color]"+"[color=393d42]Positive Score:"+result_precision(float(p_total/len(pola)))+"  Negative Score:"+str(abs(float(result_precision(float(n_total/len(pola)) ))))+"[/color]"            wplot2.points = plot_pts2            wplot.points = plot_pts            wplot3.points = plot_pts3                        nGraph.add_plot(wplot)            nGraph.add_plot(wplot2)            #nGraph.add_plot(wplot3)                                                    #daily            def dailyGraphPlot(self ,*args):            dayWidgets()            cursor.execute("SELECT gender from user_account LIMIT 1")            gender_t = cursor.fetchone()[0]            con.commit()            if gender_t == 'Male':                 petalG.source="img/wirezero.jpg"            if gender_t == 'Female':                 petalG.source="img/flowerzero.jpg"            if len(nGraph.plots)>=1:                for plot in nGraph.plots:                    nGraph.remove_plot(plot)                    nGraph._clear_buffer()                for plot in nGraph.plots:                    nGraph.remove_plot(plot)                    nGraph._clear_buffer()                                def dGraphPlot( y, mon, d,*args):            if len(nGraph.plots) >= 1:                for plots in nGraph.plots:                    nGraph.remove_plot(plots)                    nGraph._clear_buffer()                    nGraph.xlabel = 'n Logs per Day'                nGraph.ylabel = 'Polarity Values'                        d_now = datetime.datetime.now().strftime('%Y-%m-%d')            d_now_s = d_now.split('-')            cursor.execute("SELECT COUNT(*) FROM user_info WHERE year=? AND month=? AND day=?",(y,mon,d))            _x_max = int(cursor.fetchone()[0])            con.commit()            p_total = 0            n_total = 0            #print 'qweqwewq', _x_max            if _x_max != 0:                gridData.clear_widgets()                gridData.add_widget(Button(text="[color=000000]Date[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]Time[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_POS[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_NEG[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                nGraph.xmax = _x_max                #faff66                cursor.execute("SELECT pos,neg,time FROM user_info WHERE year=? AND month=? AND day=?",(y, mon, d))                plot_pts = [(0,0)]                plot_pts2 = [(0,0)]                plot_pts3 = [(0,0)]                pola = cursor.fetchall()                                for m in range(0,len(pola),1):                    temp = float(pola[m][0])                    temp2 = float(pola[m][1])                    p_total +=float(pola[m][0])                    n_total +=float(pola[m][1])                                        gridData.add_widget(Button(text="[color=000000]"+str(mon)+' '+str(d)+' '+str(y)+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                    gridData.add_widget(Button(text="[color=000000]"+str(pola[m][2])+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                    gridData.add_widget(Button(text="[color=000000]"+str('%.2f' % float(pola[m][0]) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                    gridData.add_widget(Button(text="[color=000000]"+str('%.2f '% float(pola[m][1]) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                    dd = (m+1,temp)                    dd2 = (m+1,temp2)                    if temp>temp2:                        dd3 = (m+1,temp-temp2)                    elif temp2>temp:                        dd3 = (m+1,temp2-temp)                    plot_pts.append(dd)                    plot_pts2.append(dd2)                    plot_pts3.append(dd3)                petal_val = result_precision(float(p_total/len(pola)))                petal_val = float(petal_val) * 100                con.commit()                cursor.execute("SELECT gender from user_account LIMIT 1")                gender_t = cursor.fetchone()[0]                con.commit()                if gender_t == 'Male':                    gN = 'wire'                if gender_t == 'Female':                    gN = 'flower'                if  petal_val <=0.00:                    petalG.source="img/"+gN+"zero.jpg"                      if  petal_val>= 1.00 and petal_val <= 10:                    petalG.source="img/"+gN+"one.jpg"                if petal_val >= 11.00 and petal_val<= 20.00:                    petalG.source="img/"+gN+"two.jpg"                if petal_val >= 21.00 and petal_val<= 30.00:                    petalG.source="img/"+gN+"three.jpg"                if petal_val >= 31.00 and petal_val <= 40.00:                    petalG.source="img/"+gN+"four.jpg"                if petal_val >= 41.00 and petal_val <= 50.00:                    petalG.source="img/"+gN+"five.jpg"                if petal_val >= 51.00 and petal_val <= 60.00:                    petalG.source="img/"+gN+"six.jpg"                if petal_val >= 61.00 and petal_val <= 70.00:                    petalG.source="img/"+gN+"seven.jpg"                if petal_val >= 71.00 and petal_val < 80.00:                    petalG.source="img/"+gN+"eight.jpg"                if petal_val >= 81.00 and petal_val <= 90.00:                    petalG.source="img/"+gN+"nine.jpg"                if petal_val >= 91.00 and petal_val <= 100.00:                    petalG.source="img/"+gN+"whole.jpg"                           lblTemp.text = "[color=000000]Average:[/color]"+"[color=393d42]Positive Text:"+result_precision(float(p_total/len(pola)) )+"  Negative Text:"+result_precision(float(n_total/len(pola)) )+"[/color]"                wplot.points = plot_pts                wplot2.points = plot_pts2                wplot3.points = plot_pts3                nGraph.add_plot(wplot)                nGraph.add_plot(wplot2)                #nGraph.add_plot(wplot3)            else:                pass        def result_precision(number):            return '%.2f' % number        def weeklyGraphPlot(self, *args):            weekWidgets()            cursor.execute("SELECT gender from user_account LIMIT 1")            gender_t = cursor.fetchone()[0]            con.commit()            if gender_t == 'Male':                 petalG.source="img/birdzero.jpg"            if gender_t == 'Female':                 petalG.source="img/tulipzero.jpg"            for i in range(2):                if len(nGraph.plots) >= 1:                    for plots in nGraph.plots:                        nGraph.remove_plot(plots)                        nGraph._clear_buffer()            def wGraphPlot( y, mon, d,*args):            if len(nGraph.plots) >= 1:                for plots in nGraph.plots:                    nGraph.remove_plot(plots)                    nGraph._clear_buffer()                nGraph.xlabel = 'Weekly Entries'            nGraph.ylabel = 'Polarity Values'                        nGraph.xmax = 7            p_total = 0            n_total = 0            d_now = datetime.datetime.now().strftime('%Y-%m-%d')            d_now_s = d_now.split('-')            dlist = [ [] for _ in range(7)]            dlist2 = [ [] for _ in range(7)]                        #jlist = [[] for _ in range(n)]            #create multiple list            cursor.execute("SELECT COUNT(*) FROM user_info WHERE year=? AND month=? AND day=?",(y,mon,d))            v_count = int(cursor.fetchone()[0])            #print 'eto {0}'.format(v_count)            con.commit()            c_list = []            days = []            if v_count != 0 :                gridData.clear_widgets()                gridData.add_widget(Button(text="[color=000000]Date[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]# of Entries[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_POS[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_NEG[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                                                          for i in range(0,7):                    cursor.execute("SELECT pos,neg,time FROM user_info WHERE year=? AND month=? AND day=?",(y,mon,d))                    pola = cursor.fetchall()                                        days.append(int(d))                    n_count = 0                        for ou in range(0,len(pola),1):                               temp = float(pola[ou][0])                        temp2 = float(pola[ou][1])                        dlist[i].append(temp)                        dlist2[i].append(temp2)                        n_count += 1                    c_list.append(str(n_count))                    d = str(format((int(d)+1), '02d'))                    con.commit()                plot_pts = [(0,0)]                plot_pts2 = [(0,0)]                plot_pts3 = [(0,0)]                #print c_list                for n in range(7):                        if len(dlist[n]) != 0:                        plot_pts.append( ((n+1), compute_values(sum(dlist[n]), len(dlist[n])) ) )                wplot.points = plot_pts                                for n in range(7):                    if len(dlist2[n]) != 0:                        plot_pts2.append( ((n+1), compute_values(sum(dlist2[n]), len(dlist2[n]))) )                                 #d = str(int(d)-len(dlist))                p_total = []                n_total = []                for pos_range in range(0,len(dlist)):                                        if dlist[pos_range] != []:                        gridData.add_widget(Button(text="[color=000000]"+str(mon)+' '+str(format((int(days[pos_range])), '02d'))+' '+str(y)+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str(c_list[pos_range])+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str('%.2f' % compute_values(sum(dlist[pos_range]), len(dlist[pos_range])) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str('%.2f '% compute_values(sum(dlist2[pos_range]), len(dlist2[pos_range])) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        p_total.append( compute_values(sum(dlist[pos_range]), len(dlist[pos_range])) )                        n_total.append( compute_values(sum(dlist2[pos_range]), len(dlist2[pos_range])) )                wplot2.points = plot_pts2                nGraph.add_plot(wplot)                nGraph.add_plot(wplot2)                petal_val = compute_values(sum(p_total), len(p_total))                petal_val = float(petal_val) * 100                con.commit()                cursor.execute("SELECT gender from user_account LIMIT 1")                gender_t = cursor.fetchone()[0]                con.commit()                #print petal_val                if gender_t == 'Male':                    gN = 'bird'                if gender_t == 'Female':                    gN = 'tulip'                if  petal_val <=0.00:                    petalG.source="img/"+gN+"zero.jpg"                      if  petal_val>= 1.00 and petal_val <= 10:                    petalG.source="img/"+gN+"one.jpg"                if petal_val >= 11.00 and petal_val<= 20.00:                    petalG.source="img/"+gN+"two.jpg"                if petal_val >= 21.00 and petal_val<= 30.00:                    petalG.source="img/"+gN+"three.jpg"                if petal_val >= 31.00 and petal_val <= 40.00:                    petalG.source="img/"+gN+"four.jpg"                if petal_val >= 41.00 and petal_val <= 50.00:                    petalG.source="img/"+gN+"five.jpg"                if petal_val >= 51.00 and petal_val <= 60.00:                    petalG.source="img/"+gN+"six.jpg"                if petal_val >= 61.00 and petal_val <= 70.00:                    petalG.source="img/"+gN+"seven.jpg"                if petal_val >= 71.00 and petal_val < 80.00:                    petalG.source="img/"+gN+"eight.jpg"                if petal_val >= 81.00 and petal_val <= 90.00:                    petalG.source="img/"+gN+"nine.jpg"                if petal_val >= 91.00 and petal_val <= 100.00:                    petalG.source="img/"+gN+"whole.jpg"                lblTemp.text = "[color=000000]Average:[/color]"+"[color=393d42]Positive Text:"+('%.2f '% compute_values(sum(p_total), len(p_total)))+"  Negative Text:"+('%.2f '% compute_values(sum(n_total), len(n_total)) )+"[/color]"        def monthlyGraphPlot(self, *args):            monthWidgets()            cursor.execute("SELECT gender from user_account LIMIT 1")            gender_t = cursor.fetchone()[0]            con.commit()            if gender_t == 'Male':                 petalG.source="img/birdzero.jpg"            if gender_t == 'Female':                 petalG.source="img/tulipzero.jpg"            for i in range(2):                if len(nGraph.plots) >= 1:                    for plots in nGraph.plots:                        nGraph.remove_plot(plots)                        nGraph._clear_buffer()         def mGraph(mon, y,*args):            if len(nGraph.plots) >= 1:                for plots in nGraph.plots:                    nGraph.remove_plot(plots)                    nGraph._clear_buffer()                nGraph.xlabel = 'Monthly Entries'            nGraph.ylabel = 'Polarity Values'                        nGraph.xmax = 31            p_total = 0            n_total = 0            d_now = datetime.datetime.now().strftime('%Y-%m-%d')            d_now_s = d_now.split('-')            dlist = [ [] for _ in range(31)]            dlist2 = [ [] for _ in range(31)]                        #jlist = [[] for _ in range(n)]            #create multiple list            cursor.execute("SELECT COUNT(*) FROM user_info WHERE year=? AND month=?",(y,mon))            v_count = int(cursor.fetchone()[0])            #print 'eto {0}'.format(v_count)            con.commit()            c_list = []            days = []            if v_count != 0 :                gridData.clear_widgets()                gridData.add_widget(Button(text="[color=000000]Date[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]# of Entries[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_POS[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_NEG[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                                                          for i in range(0,31):                    da = str(format((i+1), '02d'))                    cursor.execute("SELECT pos,neg,time FROM user_info WHERE year=? AND month=? AND day=?",(y,mon,da))                    pola = cursor.fetchall()                                        days.append(da)                    n_count = 0                        for ou in range(0,len(pola),1):                               temp = float(pola[ou][0])                        temp2 = float(pola[ou][1])                        dlist[i].append(temp)                        dlist2[i].append(temp2)                        n_count += 1                    c_list.append(str(n_count))                                        con.commit()                plot_pts = [(0,0)]                plot_pts2 = [(0,0)]                plot_pts3 = [(0,0)]                #print c_list                for n in range(31):                        if len(dlist[n]) != 0:                        plot_pts.append( ((n+1), compute_values(sum(dlist[n]), len(dlist[n])) ) )                wplot.points = plot_pts                                for n in range(31):                    if len(dlist2[n]) != 0:                        plot_pts2.append( ((n+1), compute_values(sum(dlist2[n]), len(dlist2[n]))) )                                 #d = str(int(d)-len(dlist))                p_total = []                n_total = []                for pos_range in range(0,len(dlist)):                                        if dlist[pos_range] != []:                        gridData.add_widget(Button(text="[color=000000]"+str(mon)+' '+str(format((int(days[pos_range])), '02d'))+' '+str(y)+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str(c_list[pos_range])+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str('%.2f' % compute_values(sum(dlist[pos_range]), len(dlist[pos_range])) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str('%.2f '% compute_values(sum(dlist2[pos_range]), len(dlist2[pos_range])) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        p_total.append( compute_values(sum(dlist[pos_range]), len(dlist[pos_range])) )                        n_total.append( compute_values(sum(dlist2[pos_range]), len(dlist2[pos_range])) )                wplot2.points = plot_pts2                nGraph.add_plot(wplot)                nGraph.add_plot(wplot2)                petal_val = compute_values(sum(p_total), len(p_total))                petal_val = float(petal_val) * 100                con.commit()                cursor.execute("SELECT gender from user_account LIMIT 1")                gender_t = cursor.fetchone()[0]                con.commit()                if gender_t == 'Male':                    gN = 'bird'                if gender_t == 'Female':                    gN = 'tulip'                if  petal_val <=0.00:                    petalG.source="img/"+gN+"zero.jpg"                      if  petal_val>= 1.00 and petal_val <= 10:                    petalG.source="img/"+gN+"one.jpg"                if petal_val >= 11.00 and petal_val<= 20.00:                    petalG.source="img/"+gN+"two.jpg"                if petal_val >= 21.00 and petal_val<= 30.00:                    petalG.source="img/"+gN+"three.jpg"                if petal_val >= 31.00 and petal_val <= 40.00:                    petalG.source="img/"+gN+"four.jpg"                if petal_val >= 41.00 and petal_val <= 50.00:                    petalG.source="img/"+gN+"five.jpg"                if petal_val >= 51.00 and petal_val <= 60.00:                    petalG.source="img/"+gN+"six.jpg"                if petal_val >= 61.00 and petal_val <= 70.00:                    petalG.source="img/"+gN+"seven.jpg"                if petal_val >= 71.00 and petal_val < 80.00:                    petalG.source="img/"+gN+"eight.jpg"                if petal_val >= 81.00 and petal_val <= 90.00:                    petalG.source="img/"+gN+"nine.jpg"                if petal_val >= 91.00 and petal_val <= 100.00:                    petalG.source="img/"+gN+"whole.jpg"                                lblTemp.text = "[color=000000]Average:[/color]"+"[color=393d42]Positive Text:"+('%.2f '% compute_values(sum(p_total), len(p_total)))+"  Negative Text:"+('%.2f '% compute_values(sum(n_total), len(n_total)) )+"[/color]"        def annualGraphPlot(self,*args):            annualWidgets()            cursor.execute("SELECT gender from user_account LIMIT 1")            gender_t = cursor.fetchone()[0]            con.commit()            if gender_t == 'Male':                 petalG.source="img/birdzero.jpg"            if gender_t == 'Female':                 petalG.source="img/tulipzero.jpg"            for i in range(2):                if len(nGraph.plots) >= 1:                    for plots in nGraph.plots:                        nGraph.remove_plot(plots)                        nGraph._clear_buffer()         def aGraph(y,*args):            if len(nGraph.plots) >= 1:                for plots in nGraph.plots:                    nGraph.remove_plot(plots)                    nGraph._clear_buffer()                    nGraph.xlabel = 'Annual Entries'                nGraph.ylabel = 'Polarity Values'                        nGraph.xmax = 12            p_total = 0            n_total = 0            d_now = datetime.datetime.now().strftime('%Y-%m-%d')            d_now_s = d_now.split('-')            dlist = [ [] for _ in range(12)]            dlist2 = [ [] for _ in range(12)]            #jlist = [[] for _ in range(n)]            #create multiple list            cursor.execute("SELECT COUNT(*) FROM user_info WHERE year="+str(y))            v_count = int(cursor.fetchone()[0])            #print 'eto {0}'.format(v_count)            con.commit()            m_list = []            days = []            temp_list = []            if v_count != 0 :                gridData.clear_widgets()                gridData.add_widget(Button(text="[color=000000]Date[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]# of Entries[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_POS[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                gridData.add_widget(Button(text="[color=000000]P_NEG[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                for m in range(12):                    ma = str(format((m+1), '02d'))                    m_list.append(ma)                    for i in range(31):                        da = str(format((i+1), '02d'))                        cursor.execute("SELECT pos,neg,time FROM user_info WHERE year=? AND month=? AND day=?",(y,ma,da))                        pola = cursor.fetchall()                                                for ou in range(0,len(pola),1):                            temp = float(pola[ou][0])                            temp2 = float(pola[ou][1])                            temp_list.append(temp)                            temp_list2.append(temp2)                            t_Values = compute_values(sum(temp_list), len(temp_list))                            t_Values2 = compute_values(sum(temp_list2), len(temp_list2))                            dlist[m].append(t_Values)                            dlist2[m].append(t_Values2)                        t_Values = 0                        t_Values2 = 0                        temp_list2 = []                        temp_list = []                        con.commit()                    con.commit()                plot_pts = [(0,0)]                plot_pts2 = [(0,0)]                plot_pts3 = [(0,0)]                for n in range(12):                        if len(dlist[n]) != 0:                        plot_pts.append( ((n+1), compute_values(sum(dlist[n]), len(dlist[n])) ) )                wplot.points = plot_pts                for n in range(12):                    if len(dlist2[n]) != 0:                        plot_pts2.append( ((n+1), compute_values(sum(dlist2[n]), len(dlist2[n]))) )                                 #d = str(int(d)-len(dlist))                p_total = []                n_total = []                for pos_range in range(0,len(dlist)):                                        if dlist[pos_range] != []:                        gridData.add_widget(Button(text="[color=000000]"+str(m_list[pos_range])+' '+' '+str(y)+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str(m_list[pos_range])+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str('%.2f' % compute_values(sum(dlist[pos_range]), len(dlist[pos_range])) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        gridData.add_widget(Button(text="[color=000000]"+str('%.2f '% compute_values(sum(dlist2[pos_range]), len(dlist2[pos_range])) )+"[/color]",font_size='9sp',markup=True,background_color=[0,0,0,0]))                        p_total.append( compute_values(sum(dlist[pos_range]), len(dlist[pos_range])) )                        n_total.append( compute_values(sum(dlist2[pos_range]), len(dlist2[pos_range])) )                wplot2.points = plot_pts2                nGraph.add_plot(wplot)                nGraph.add_plot(wplot2)                                petal_val = compute_values(sum(p_total), len(p_total))                petal_val = float(petal_val) * 100                con.commit()                cursor.execute("SELECT gender from user_account LIMIT 1")                gender_t = cursor.fetchone()[0]                con.commit()                if gender_t == 'Male':                    gN = 'bird'                if gender_t == 'Female':                    gN = 'tulip'                if  petal_val <=0.00:                    petalG.source="img/"+gN+"zero.jpg"                      if  petal_val>= 1.00 and petal_val <= 10:                    petalG.source="img/"+gN+"one.jpg"                if petal_val >= 11.00 and petal_val<= 20.00:                    petalG.source="img/"+gN+"two.jpg"                if petal_val >= 21.00 and petal_val<= 30.00:                    petalG.source="img/"+gN+"three.jpg"                if petal_val >= 31.00 and petal_val <= 40.00:                    petalG.source="img/"+gN+"four.jpg"                if petal_val >= 41.00 and petal_val <= 50.00:                    petalG.source="img/"+gN+"five.jpg"                if petal_val >= 51.00 and petal_val <= 60.00:                    petalG.source="img/"+gN+"six.jpg"                if petal_val >= 61.00 and petal_val <= 70.00:                    petalG.source="img/"+gN+"seven.jpg"                if petal_val >= 71.00 and petal_val < 80.00:                    petalG.source="img/"+gN+"eight.jpg"                if petal_val >= 81.00 and petal_val <= 90.00:                    petalG.source="img/"+gN+"nine.jpg"                if petal_val >= 91.00 and petal_val <= 100.00:                    petalG.source="img/"+gN+"whole.jpg"                                                lblTemp.text = "[color=000000]Average:[/color]"+"[color=393d42]Positive Text:"+('%.2f '% compute_values(sum(p_total), len(p_total)))+"  Negative Text:"+('%.2f '% compute_values(sum(n_total), len(n_total)) )+"[/color]"        def compute_values(a, b):            if a==0:                return 0            else:                  return float(a)/b        #daily Widgets + buttons on Dropdown        def dayWidgets():            root4.add_widget(btnDayDay)            root4.add_widget(btnYearDay)            root4.add_widget(btnMonthDay)                def daily_day(self,*args):            dropdownDay.clear_widgets()            cursor.execute('SELECT DISTINCT day FROM user_info')            day_values = cursor.fetchall()            for day in day_values:                  day_t_btn = Button(text='[color=000000]'+str(day[0])+'[/color]',                            markup=True,                             font_size='12sp',                             background_normal="ffffff",                           size_hint=(1,None),                           height=50)                day_t_btn.bind(on_release=lambda day_t_btn: dropdownDay.select(day_t_btn.text))                day_t_btn.bind(on_release=partial(dChange_day, str(day[0]) ))                dropdownDay.add_widget(day_t_btn)            con.commit()        def dChange_day(dD,*args):            global dDay            dDay = str(dD)            btnDayDay.text = dDay            dGraphPlot(dYear,dMonth,dDay)                    def daily_year(self,*args):            dropdownYearDay.clear_widgets()            cursor.execute('SELECT DISTINCT year FROM user_info')            year_values = cursor.fetchall()            for year in year_values:                  year_t_btn = Button(text='[color=000000]'+str(year[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                               size_hint=(1,None),                               height=50)                year_t_btn.bind(on_release=lambda year_t_btn: dropdownYearDay.select(year_t_btn.text))                year_t_btn.bind(on_release=partial(dChange_year, str(year[0])))                dropdownYearDay.add_widget(year_t_btn)            con.commit()        def dChange_year(dY,*args):            global dYear            dYear = str(dY)            btnYearDay.text = dY            dGraphPlot(dYear,dMonth,dDay)                    def daily_month(self,*args):            dropdownYearMonth.clear_widgets()            cursor.execute('SELECT DISTINCT month FROM user_info')            month_values = cursor.fetchall()            for month in month_values:                  month_t_btn = Button(text='[color=000000]'+str(month[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                              size_hint=(1,None),                              height=50)                month_t_btn.bind(on_release=lambda month_t_btn: dropdownYearMonth.select(month_t_btn.text))                month_t_btn.bind(on_release=partial(dChange_month, str(month[0]) ))                dropdownYearMonth.add_widget(month_t_btn)            con.commit()         def dChange_month(dM,*args):            global dMonth            dMonth = str(dM)            btnMonthDay.text = dM            dGraphPlot(dYear,dMonth,dDay)        #weekly Widgets + buttons on Dropdown        def weekWidgets():            root4.add_widget(btnWeekDay)            root4.add_widget(btnWeekYear)            root4.add_widget(btnWeekMonth)                    def weekly_day(self,*args):            dropdownWeekDay.clear_widgets()            cursor.execute('SELECT DISTINCT day FROM user_info')            day_values = cursor.fetchall()            for day in day_values:                  day_t_btn = Button(text='[color=000000]'+str(day[0])+'[/color]',                            markup=True,                             font_size='12sp',                             background_normal="ffffff",                           size_hint=(1,None),                           height=50)                day_t_btn.bind(on_release=lambda day_t_btn: dropdownWeekDay.select(day_t_btn.text))                day_t_btn.bind(on_release=partial(wChange_day, str(day[0]) ))                dropdownWeekDay.add_widget(day_t_btn)            con.commit()        def wChange_day(wD,*args):            global dDay            dDay = str(wD)            btnWeekDay.text = wD            wGraphPlot(dYear,dMonth,dDay)                    def weekly_year(self,*args):            dropdownWeekYear.clear_widgets()            cursor.execute('SELECT DISTINCT year FROM user_info')            year_values = cursor.fetchall()            for year in year_values:                  year_t_btn = Button(text='[color=000000]'+str(year[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                               size_hint=(1,None),                               height=50)                year_t_btn.bind(on_release=lambda year_t_btn: dropdownWeekYear.select(year_t_btn.text))                year_t_btn.bind(on_release=partial(wChange_year, str(year[0])))                dropdownWeekYear.add_widget(year_t_btn)            con.commit()        def wChange_year(wY,*args):            global dYear            dYear = str(wY)            btnWeekYear.text = wY            wGraphPlot(dYear,dMonth,dDay)                    def weekly_month(self,*args):            dropdownWeekMonth.clear_widgets()            cursor.execute('SELECT DISTINCT month FROM user_info')            month_values = cursor.fetchall()            for month in month_values:                  month_t_btn = Button(text='[color=000000]'+str(month[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                              size_hint=(1,None),                              height=50)                month_t_btn.bind(on_release=lambda month_t_btn: dropdownWeekMonth.select(month_t_btn.text))                month_t_btn.bind(on_release=partial(wChange_month, str(month[0]) ))                dropdownWeekMonth.add_widget(month_t_btn)            con.commit()         def wChange_month(wM,*args):            global dMonth            dMonth = str(wM)            btnWeekMonth.text = wM            wGraphPlot(dYear,dMonth,dDay)        #Monthly Widgets + buttons on Dropdown        def monthWidgets():            root4.add_widget(btnMon1)            root4.add_widget(btnMon2)        def monthly_month(self,*args):            dropdownMonth.clear_widgets()            cursor.execute('SELECT DISTINCT year FROM user_info')            month_values = cursor.fetchall()            for month in month_values:                  month_t_btn = Button(text='[color=000000]'+str(month[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                              size_hint=(1,None),                              height=50)                month_t_btn.bind(on_release=lambda month_t_btn: dropdownMonth.select(month_t_btn.text))                month_t_btn.bind(on_release=partial(mChange_month, str(month[0]) ))                dropdownMonth.add_widget(month_t_btn)            con.commit()                     def mChange_month(mM,*args):            global dMonth            dMonth = str(mM)            btnMon1.text = mM            mGraph(dYear,dMonth)        def monthly_year(self,*args):            dropdownMonthYear.clear_widgets()            cursor.execute('SELECT DISTINCT month FROM user_info')            year_values = cursor.fetchall()            for year in year_values:                  year_t_btn = Button(text='[color=000000]'+str(year[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                               size_hint=(1,None),                               height=50)                year_t_btn.bind(on_release=lambda year_t_btn: dropdownMonthYear.select(year_t_btn.text))                year_t_btn.bind(on_release=partial(mChange_year, str(year[0])))                dropdownMonthYear.add_widget(year_t_btn)            con.commit()                           def mChange_year(mY,*args):            global dYear            dYear = str(mY)            btnMon2.text = mY            mGraph(dYear,dMonth)        #Yearly Widgets + buttons on Dropdown                        def annualWidgets():            root4.add_widget(btnAnnualYear)        def yearly_year(self,*args):            dropdownAnnual.clear_widgets()            cursor.execute('SELECT DISTINCT year FROM user_info')            year_values = cursor.fetchall()            for year in year_values:                  year_t_btn = Button(text='[color=000000]'+str(year[0])+'[/color]',                                markup=True,                                 font_size='12sp',                                 background_normal="ffffff",                               size_hint=(1,None),                               height=50)                year_t_btn.bind(on_release=lambda year_t_btn: dropdownAnnual.select(year_t_btn.text))                year_t_btn.bind(on_release=partial(yChange_year, str(year[0])))                dropdownAnnual.add_widget(year_t_btn)            con.commit()           def yChange_year(yY,*args):            global dYear            dYear = str(yY)            btnAnnualYear.text = yY            aGraph(dYear)              def rWidgets(self,*args):            root4.remove_widget(petalG)            root4.remove_widget(lblDescript)            root4.remove_widget(scrollData)            scrollData.remove_widget(gridData)            boxStats.remove_widget(nGraph)            t_consul = '0'            www = 0            cursor.execute("SELECT COUNT(*) FROM consultant_account")            www = int(cursor.fetchone()[0])            con.commit()            cursor.execute("SELECT id from consultant_account")            tmp_id = cursor.fetchone()[0]            con.commit()            cursor.execute("SELECT Control FROM consultant_account WHERE ID="+str(tmp_id))            t_consul = str(cursor.fetchone()[0])            con.commit()                            if t_consul == '0':                statsTitle.text = 'User Garden'                root4.add_widget(petalG)                        if t_consul == '1':                root4.add_widget(lblDescript)                root4.add_widget(lblTemp)                root4.add_widget(scrollData)                scrollData.add_widget(gridData)                #graph                boxStats.add_widget(nGraph)        def removeDWM():                        root4.remove_widget(btnAnnualYear)            dropdownAnnual.remove_widget(btnann1)            btnAnnualYear.text = "Year v"                        root4.remove_widget(btnWeekDay)            dropdownDay.remove_widget(btnwd1)            root4.remove_widget(btnWeekYear)            dropdownYearDay.remove_widget(btnwy1)            root4.remove_widget(btnWeekMonth)            dropdownYearMonth.remove_widget(btnwm1)            btnWeekDay.text = "Day v"            btnWeekYear.text = "Year v"            btnWeekMonth.text = "Month v"                        root4.remove_widget(btnMon1)            root4.remove_widget(btnMon2)            dropdownMonth.remove_widget(btnmm1)            dropdownMonth.remove_widget(btnmm2)            dropdownMonthYear.remove_widget(btnmy1)            dropdownMonthYear.remove_widget(btnmy2)            btnMon1.text = "Year v"            btnMon2.text = "Month v"                                    root4.remove_widget(btnDayDay)            dropdownDay.remove_widget(btnd1)            dropdownDay.remove_widget(btnd2)            root4.remove_widget(btnYearDay)            dropdownYearDay.remove_widget(btndy1)            dropdownYearDay.remove_widget(btndy2)            root4.remove_widget(btnMonthDay)            dropdownYearMonth.remove_widget(btnmy11)            dropdownYearMonth.remove_widget(btnmy22)            btnDayDay.text = "Day v"            btnMonthDay.text = "Year v"            btnYearDay.text = "Month v"                                def removeDWM1(self,*args):            removeDWM()              def screen4():            sc4.add_widget(root4)            root4.add_widget(frontBg4)            root4.add_widget(statsTitle)            root4.add_widget(b_sc4menu)            root4.add_widget(btnHelpGraph)                        graphDown.add_widget(btnDaily)            graphDown.add_widget(btnWeekly)            graphDown.add_widget(btnMonthly)            graphDown.add_widget(btnAnnual)            #eto tinanggal ko tapos dito rin ako nagcode            root4.add_widget(graphButton)            t_consul = '0'            www = 0            cursor.execute("SELECT COUNT(*) FROM consultant_account")            www = int(cursor.fetchone()[0])            con.commit()            cursor.execute("SELECT id from consultant_account")            tmp_id = cursor.fetchone()[0]            con.commit()            cursor.execute("SELECT Control FROM consultant_account WHERE ID="+str(tmp_id))            t_consul = str(cursor.fetchone()[0])            con.commit()                            if t_consul == '0':                statsTitle.text = 'User Garden'                root4.add_widget(petalG)                        if t_consul == '1':                root4.add_widget(lblDescript)                root4.add_widget(lblTemp)                root4.add_widget(scrollData)                scrollData.add_widget(gridData)                #graph                boxStats.add_widget(nGraph)        #Screen5          def screen5(t_date,t_time,*args):                #--sc5                root5= FloatLayout(size_hint = (1.0, 1.0))                frontBg5 = Image(pos= root.pos,                           source="img/white.jpg",                           allow_stretch=True,                           keep_ratio=False)                b_sc5menu =  Button(text="[color=000000]T[/color]",                            markup=True,                            font_name='IconsSouthSt.ttf',                            font_size='20sp',                            pos_hint={'x':0.02,'center_y': 0.96},                            background_normal="img/white.jpg",                            size_hint=(.115,.08))                recentTitle = Button(text="[color=000000]Logs History[/color]",                            markup=True,                            pos_hint={'x':0,'center_y': 0.96},                            font_name='helv.otf',                                             background_normal="img/white.jpg",                            background_down="img/white.jpg",                            font_size='25sp',                            size_hint=(1,.09))                grid5_history=GridLayout(cols=1,                                        padding=10,                                        size_hint_y=None,                                        pos_hint={'center_x':.5, 'center_y':.48})                grid5_history.bind(minimum_height=grid5_history.setter('height'))                sv5_history=ScrollView(size_hint=(1,.75),                                      pos_hint={'center_x':.5, 'center_y':.5})                                                        sc5.add_widget(root5)                root5.add_widget(frontBg5)                root5.add_widget(recentTitle)                root5.add_widget(b_sc5menu)                root5.add_widget(sv5_history)                sv5_history.add_widget(grid5_history)                b_sc5menu.bind(on_press=callbackscmain)                #nilagay ni joms                grid5_history.clear_widgets()                #con.commit()                dis_date = t_date.split('-')                cursor.execute("SELECT info from user_info WHERE year=? AND month=? AND day=? AND time=?",(dis_date[0],dis_date[1],dis_date[2],t_time ) )                wat = cursor.fetchall()[0][0]                def formatItem(right):                    wrapped = fill(right, width=50)                    return '{0}'.format(wrapped)                wat = formatItem(wat)                btnn = Button(text="[color=000000]"+t_date+'   '+t_time+"\n\n{0}[/color]".format(wat),                            #background_normal='img/feedbord.png',                            size_hint=(1,None),                            font_size='13sp',                            background_color=[0,0,0,0],                             #font_name='helv.otf',                            height=300,                            markup=True)                btnn2 = Button(text="",                            size_hint=(1,None),                            font_size='13sp',                            background_color=[0,0,0,0],                             #font_name='helv.otf',                            height=200,                            markup=True)                btnn3 = Button(text="",                            size_hint=(1,None),                            font_size='13sp',                            background_color=[0,0,0,0],                             #font_name='helv.otf',                            height=200,                            markup=True)                if len(wat)>300:                    grid5_history.add_widget(btnn3)                if len(wat)<300:                    btnn.height = 200                if len(wat)<150:                    btnn.height = 150                grid5_history.add_widget(btnn)                grid5_history.add_widget(btnn2)                        def callbacksc5(d,t,*args):            sm.transition = SwapTransition()            sm.current='fifthscreen'##            grid_history.clear_widgets()##            sv_history.clear_widgets()##            sv_history.remove_widget(grid_history)##            rootmain.remove_widget(sv_history)            screen5(d,t)         def getDB():            cursor.execute("SELECT * from user_info")            dt = cursor.fetchall()            tp = ''            #con.commit()            cursor.execute("SELECT COUNT(*) from user_info")            xx = cursor.fetchone()            #cursor.execute("SELECT COUNT(DISTINCT month) from user_info")            #print cursor.fetchone()            #con.commit()            def formatItem(right):                wrapped = fill(right, width=50)                return '{0}'.format(wrapped)                                                 for i in range(xx[0],0,-1):                wat = str(dt[i-1][5])                wat = formatItem(wat)                if len(wat)>=40:                    wat = wat[:36] + '.'*3                 else:                    wat = wat + '.'*4                _tmp_d = str(dt[i-1][1]) +'-'+ str(dt[i-1][2])+'-'+str(dt[i-1][3])                tp = _tmp_d + (' '*40)+str(dt[i-1][4])+'\n'+str(wat)                            btn = Button(text="[color=000000]{0}[/color]".format(tp),                             background_normal='img/feedbord.png',                             #background_color=[0,0,0,0.5],                            size_hint=(1,None),                            font_size='13sp',                            #font_name='helv.otf',                            height=100,                            markup=True)                                btn.bind(on_press=partial(callbacksc5, _tmp_d, dt[i-1][4] ))                #btn.bind(on_release= get_dot)                grid_history.add_widget(btn)                    def screenmain():            scmain.add_widget(rootmain)            rootmain.add_widget(frontBgmain)            rootmain.add_widget(logsTitle)            rootmain.add_widget(sv_history)            sv_history.add_widget(grid_history)            rootmain.add_widget(b_scmainmenu)            getDB()        def addbatt():            root6.add_widget(root6time)            root6.add_widget(root6batt)            root6.add_widget(root6lblbatt)            root6.add_widget(root6lbldate)                    def removebatt():            root6.remove_widget(root6time)            root6.remove_widget(root6batt)            root6.remove_widget(root6lblbatt)            root6.remove_widget(root6lbldate)                    def screen6():            sc6.add_widget(root6)            root6.add_widget(frontBg6)            root6.add_widget(root6Title)            root6.add_widget(mainbutton)            dropdown.add_widget(btnCP)            dropdown.add_widget(btnColor)            dropdown.add_widget(btnCons)            dropdown.add_widget(btnD)            dropdown.add_widget(btnA)            dropdown.add_widget(btnHelp)            dropdown.add_widget(btnLO)            root6.add_widget(b_logs)            root6.add_widget(b_home)            root6.add_widget(b_write)            root6.add_widget(b_stats)            root6.add_widget(lblHome)            root6.add_widget(lblStat)            root6.add_widget(lblLogs)            root6.add_widget(lblWrite)            #change stat into Garden            t_consul = 0            www = 0            cursor.execute("SELECT COUNT(*) FROM consultant_account")            www = int(cursor.fetchone()[0])            con.commit()            if www != 0:                cursor.execute("SELECT Control FROM consultant_account")                t_consul = int(cursor.fetchone()[0])                con.commit()            if t_consul == 0:                lblStat.text = "[color=ffffff]Garden[/color]"                        if t_consul == 1:                lblStat.text = "[color=ffffff]Stats[/color]"                        addbatt()                    def screen3():            sc3.add_widget(root3)            root3.add_widget(frontBg3)            root3.add_widget(b_sc3)            root3.add_widget(input_sc3)            root3.add_widget(titlewrite)            root3.add_widget(label_write)            root3.add_widget(b_sc3menu)        def popPin():##            cursor.execute("SELECT COUNT(*) from user_account")##            if cursor.fetchone()[0] == 1:                bPopPin.add_widget(lblPin)                bPopPin.add_widget(tbPin1)                bPopPin.add_widget(lblPin2)                bPopPin.add_widget(tbPin2)                bPopPin.add_widget(lblDum)                bPopPin.add_widget(buttonPopPin)                popupPin.open()##            else:##                pass        def popGenderRemove1(self,*args):            cursor.execute("SELECT id from user_account")            tmp_id = cursor.fetchone()[0]            con.commit()            cursor.execute("UPDATE user_account SET gender=? WHERE id=?",('Male',tmp_id))            con.commit()            bPopGender.remove_widget(buttonPopGender1)            bPopGender.remove_widget(buttonPopGender2)            bPopGender.remove_widget(lblgender)            popupgender.dismiss()            popPin()        def popGenderRemove2(self,*args):            cursor.execute("SELECT id from user_account")            tmp_id = cursor.fetchone()[0]            con.commit()            cursor.execute("UPDATE user_account SET gender=? WHERE id=?",('Female',tmp_id))            con.commit()            bPopGender.remove_widget(buttonPopGender1)            bPopGender.remove_widget(buttonPopGender2)            bPopGender.remove_widget(lblgender)            popupgender.dismiss()            popPin()                        def popColor(self,*args):            bPopColor.add_widget(buttonColorGreen)            bPopColor.add_widget(buttonColorRed)            bPopColor.add_widget(buttonColorBlue)            bPopColor.add_widget(buttonColorOrange)            bPopColor.add_widget(buttonColorPurple)            bPopColor.add_widget(buttonColorPGreen)            bPopColor.add_widget(buttonColorPRed)            bPopColor.add_widget(buttonColorPBlue)            bPopColor.add_widget(buttonColorPOrange)            bPopColor.add_widget(buttonColorPPurple)            bPopColor.add_widget(buttonPopColor)            popupColor.open()        def popColorRemove():            bPopColor.remove_widget(buttonColorGreen)            bPopColor.remove_widget(buttonColorRed)            bPopColor.remove_widget(buttonColorBlue)            bPopColor.remove_widget(buttonColorOrange)            bPopColor.remove_widget(buttonColorPurple)            bPopColor.remove_widget(buttonColorPGreen)            bPopColor.remove_widget(buttonColorPRed)            bPopColor.remove_widget(buttonColorPBlue)            bPopColor.remove_widget(buttonColorPOrange)            bPopColor.remove_widget(buttonColorPPurple)            bPopColor.remove_widget(buttonPopColor)        def ConsultantMode(self,*args):            if btnCons.text == '[color=ffffff]User Mode[/color]':                cursor.execute("SELECT id from consultant_account")                tmp_id = cursor.fetchone()[0]                con.commit()                cursor.execute("UPDATE consultant_account SET Control=? WHERE id=?",('0',tmp_id))                con.commit()                btnCons.text = '[color=ffffff]Consultant Mode[/color]'                bPopConsult.add_widget(lblConsult)                lblConsult.text="[color=000000]You're now in User Mode[/color]"                bPopConsult.add_widget(buttonPopConsult)                popupConsult.open()                def consuldismiss(self,*args):                    bPopConsult.remove_widget(lblConsult)                    bPopConsult.remove_widget(buttonPopConsult)                    popupConsult.dismiss()                buttonPopConsult.bind(on_press=consuldismiss)                                                                            elif btnCons.text == '[color=ffffff]Consultant Mode[/color]':                cursor.execute("SELECT id from consultant_account")                tmp_id = cursor.fetchone()[0]                con.commit()                cursor.execute("UPDATE consultant_account SET Control=? WHERE id=?",('1',tmp_id))                con.commit()                btnCons.text = '[color=ffffff]User Mode[/color]'                bPopConsult.add_widget(lblConsult)                bPopConsult.add_widget(buttonPopConsult)                popupConsult.open()                def consuldismiss1(self,*args):                    bPopConsult.remove_widget(lblConsult)                    bPopConsult.remove_widget(buttonPopConsult)                    popupConsult.dismiss()                buttonPopConsult.bind(on_press=consuldismiss1)                                        def MMHelp(self,*args):            bPopHelp.add_widget(carouselHelp)            carouselHelp.add_widget(lblHelp)            carouselHelp.add_widget(tut1)            carouselHelp.add_widget(tut2)            carouselHelp.add_widget(tut3)            carouselHelp.add_widget(tut4)            carouselHelp.add_widget(btnHelp1)            popuphelp.open()            def dismisshelp(self,*args):                bPopHelp.remove_widget(carouselHelp)                carouselHelp.remove_widget(lblHelp)                carouselHelp.remove_widget(tut1)                carouselHelp.remove_widget(tut2)                carouselHelp.remove_widget(tut3)                carouselHelp.remove_widget(tut4)                carouselHelp.remove_widget(btnHelp1)                popuphelp.dismiss()            btnHelp1.bind(on_press=dismisshelp)                                def screen2():            popname()            sc2.add_widget(root2)            root2.add_widget(frontBg2)            root2.add_widget(txtInp2)            root2.add_widget(passimg1)            root2.add_widget(passimg2)            root2.add_widget(passimg3)            root2.add_widget(passimg4)            root2.add_widget(passimg5)            root2.add_widget(passimg6)            root2.add_widget(passimg7)            root2.add_widget(passimg8)            root2.add_widget(passimg9)            root2.add_widget(passimgclr)            root2.add_widget(passimg0)            root2.add_widget(passimgok)            root2.add_widget(titlepin)        def screen7():            root7.remove_widget(frontBg7)            root7.remove_widget(userTitle)            root7.remove_widget(b_sc7menu)            root7.remove_widget(petalWhole)            sc7.remove_widget(root7)            sc7.add_widget(root7)            root7.add_widget(frontBg7)            root7.add_widget(userTitle)            root7.add_widget(petalWhole)                        root7.add_widget(b_sc7menu)                    #--EVENTS-----------------------                        def p1(self,*args):            txtInp2.text += "1"        def p2(self,*args):            txtInp2.text += "2"        def p3(self,*args):            txtInp2.text += "3"        def p4(self,*args):            txtInp2.text += "4"        def p5(self,*args):            txtInp2.text += "5"        def p6(self,*args):            txtInp2.text += "6"        def p7(self,*args):            txtInp2.text += "7"        def p8(self,*args):            txtInp2.text += "8"        def p9(self,*args):            txtInp2.text += "9"        def p0(self,*args):            txtInp2.text += "0"        def pclr(self,*args):            txtInp2.text = ""                def feedremove():            #nilagay ni joms            grid5_history.clear_widgets()            sv5_history.clear_widgets()                        grid_history.clear_widgets()            sv_history.clear_widgets()            scmain.remove_widget(rootmain)            rootmain.remove_widget(frontBgmain)            rootmain.remove_widget(logsTitle)            sv_history.remove_widget(grid_history)            rootmain.remove_widget(sv_history)            rootmain.remove_widget(b_scmainmenu)                    def feedadd():            feedremove()            rootmain.add_widget(sv_history)            sv_history.add_widget(grid_history)            getDB()                        def popsave():            bPopSave.add_widget(lblsave)            bPopSave.add_widget(buttonPopSave)            popupsave.open()                    def callback_proctext(self,*args):            thoughts_text = input_sc3.text            thoughts_text = thoughts_text.lower()            thoughts_text = re.sub( '\s+', ' ', thoughts_text ).strip()            thoughts_text = re.sub(r"[^\w.,']", ' ', thoughts_text)            #thoughts_text = re.sub(r"[^\w]", ' ', thoughts_text)            #print thoughts_text            if str(thoughts_text).isspace() == False and str(thoughts_text).strip() != '':                date_now = datetime.datetime.now().strftime('%Y-%m-%d')                time_now = datetime.datetime.now().strftime('%I:%M %p')                p_pos = naive_classifier.classify_polarity(thoughts_text)[0]                p_neg = naive_classifier.classify_polarity(thoughts_text)[1]                cursor.execute("INSERT INTO user_info(year,month,day,time,info,mood,pos,neg) VALUES(?,?,?,?,?,?,?,?)",(date_now.split('-')[0],date_now.split('-')[1],date_now.split('-')[2],time_now,thoughts_text,str(mood_value),p_pos,p_neg))                con.commit()                input_sc3.text = ""                input_sc3.clear_widgets()                popsave()                feedremove()                            else:                 boxErrorWrite = BoxLayout(orientation="vertical")                buttonErrorWrite = Button(text="CLOSE",                                          background='img/blue.jpg',                                          size_hint=(1,.5))                lblErrorWrite2=Label(text="[color=000000]CANNOT SAVE EMPTY LOG[/color]",                                      markup=True)                boxErrorWrite.add_widget(lblErrorWrite2)                boxErrorWrite.add_widget(buttonErrorWrite)                popuperrorwrite= Popup(title='',                      separator_color=[0,0,1,0.5],                        background='img/white.jpg',                          content=boxErrorWrite,                         auto_dismiss=False,                        size_hint=(0.6, 0.2))                popuperrorwrite.open()                                def errorclick(self,*args):                    popuperrorwrite.dismiss()                                    buttonErrorWrite.bind(on_press=errorclick)                #print 'walang laman'                    def callbackmain(self,*args):            cursor.execute("SELECT password from user_account")            pwd = cursor.fetchall()[0]            #password is 8888            con.commit()            #txtInp2.text = '8888'            if txtInp2.text == pwd[0]:                sm.current='sixthscreen'                                #always update into ordinary user                cursor.execute("SELECT id from consultant_account")                tmp_id = cursor.fetchone()[0]                con.commit()                cursor.execute("UPDATE consultant_account SET Control=? WHERE id=?",('0',tmp_id))                con.commit()                screen6()                popup.open()                screen3()                screen4()            else:                pass        def popsc3():            bPop3.add_widget(lblmood)            bPop3.add_widget(bPop33)            bPop33.add_widget(bAngry)            bPop33.add_widget(bSad)            bPop33.add_widget(bHappy3)            bPop33.add_widget(bHappy2)            bPop33.add_widget(bHappy)            bPop3.add_widget(tryslide)            bPop3.add_widget(btnSlider)                        popup3.open()        def popexit(self,*args):            bPopExit.add_widget(lblexit)            bPopExit.add_widget(bPopExit2)            bPopExit2.add_widget(buttonPopExit1)            bPopExit2.add_widget(buttonPopExit2)            popupexit.open()        def popcp(self,*args):            bPopCp.add_widget(lblCp1)            bPopCp.add_widget(tbCp1)            bPopCp.add_widget(lblCp2)            bPopCp.add_widget(tbCp2)            bPopCp.add_widget(lblCp3)            bPopCp.add_widget(tbCp3)            bPopCp.add_widget(lblblank)            bPopCp.add_widget(lblnotice)            bPopCp.add_widget(buttonPopCpExit)            bPopCp.add_widget(buttonPopCp)            lblnotice.text=""            lblblank.text=""            popupCp.open()        def popdev(self,*args):            bPopD.add_widget(imgBruno)            bPopD.add_widget(imgJoms)            bPopD.add_widget(lblDev2)            bPopD.add_widget(lblDev1)            bPopD.add_widget(lbldevblank)            bPopD.add_widget(buttonPopD)            popupDev.open()        def popabout(self,*args):            bPopAb.add_widget(lblabout)            bPopAb.add_widget(buttonPopAb)            popupabout.open()        bPopError = GridLayout(cols=1,padding=5,spacing = 5)        lblerror= Label(text="[color=000000]Invalid Password![/color]",                       # font_name='helv.otf',                        markup=True,halign='center',                        size_hint=(1,.5),                              font_size='10sp')        buttonPopError = Button(text="Close",                             #font_name='helv.otf',                             size_hint=(.5,.2),                             background_normal="img/roundblue.jpg")        popuperror = Popup(background="img/white.jpg",                      separator_color=[1,0,0,0.5],                        content=bPopError,                           title="Error",                         auto_dismiss=False,title_color=[0,0,0,1],                        size_hint=(0.5, 0.2))        #--devmode        bPopConsult = GridLayout(cols=1,padding=5,spacing = 5)        lblConsult= Label(text="[color=000000]You're now in Consultant Mode[/color]",                       # font_name='helv.otf',                        markup=True,halign='center',                        size_hint=(1,.5),                              font_size='10sp')        buttonPopConsult = Button(text="Close",                             #font_name='helv.otf',                             size_hint=(.5,.2),                             background_normal="img/roundblue.jpg")        popupConsult = Popup(background="img/white.jpg",                      separator_color=[1,0,0,0.5],                        content=bPopConsult,                           title=" ",                         auto_dismiss=False,                        size_hint=(0.5, 0.2))        def popError(self, *args):            bPopError.add_widget(lblerror)            bPopError.add_widget(buttonPopError)            cursor.execute("SELECT password from user_account")            pwd = cursor.fetchall()[0]            con.commit()            if txtInp2.text != pwd[0]:                popuperror.open()        def callbacksc2(self,*args):            sm.current='secondscreen'            screen2()        def callbacksc3(self,*args):            sm.transition = SwapTransition()            sm.current='thirdscreen'            input_sc3.text=""            #popsc3()          def callbacksc4(self,*args):            #back to main screen from graph            sm.transition = SwapTransition()            sm.current='fourthscreen'            root4.add_widget(boxStats)            #root4.add_widget(btnCont)                        wplot = SmoothLinePlot(mode="points",color=rgb('adaa0a'))            removeDWM()                    def callbacksc7(self,*args):            sm.transition = SwapTransition()            sm.current='seventhscreen'            screen7()                                            def mooddismiss():            popup3.remove_widget(bPop3)            bPop3.remove_widget(bPop33)            bPop3.remove_widget(lblmood)            bPop33.remove_widget(bHappy)            bPop33.remove_widget(bHappy2)            bPop33.remove_widget(bHappy3)            bPop33.remove_widget(bSad)            bPop33.remove_widget(bAngry)            bPop3.remove_widget(tryslide)            bPop3.remove_widget(btnSlider)                      def popexitdismiss(self,*args):            popupexit.dismiss()            bPopExit2.remove_widget(buttonPopExit1)            bPopExit2.remove_widget(buttonPopExit2)            bPopExit.remove_widget(bPopExit2)            bPopExit.remove_widget(lblexit)        def popaboutdismiss(self,*args):            popupabout.dismiss()            bPopAb.remove_widget(buttonPopAb)            bPopAb.remove_widget(lblabout)        def poperrordismiss(self,*args):            txtInp2.text = ''            popuperror.dismiss()            bPopError.remove_widget(buttonPopError)            bPopError.remove_widget(lblerror)        def popdevdismiss(self,*args):            popupDev.dismiss()            bPopD.remove_widget(buttonPopD)            bPopD.remove_widget(lblDev1)            bPopD.remove_widget(lblDev2)            bPopD.remove_widget(imgBruno)            bPopD.remove_widget(imgJoms)            bPopD.remove_widget(lbldevblank)        def popsavenotidismiss(self,*args):            popupsave.dismiss()            bPopSave.remove_widget(buttonPopSave)            bPopSave.remove_widget(lblsave)                                def popcpdismiss(self,*args):            popupCp.dismiss()            tbCp1.text=""            tbCp2.text=""            tbCp3.text=""            bPopCp.remove_widget(buttonPopCp)            bPopCp.remove_widget(buttonPopCpExit)            bPopCp.remove_widget(lblCp1)            bPopCp.remove_widget(lblCp2)            bPopCp.remove_widget(lblCp3)            bPopCp.remove_widget(tbCp1)            bPopCp.remove_widget(tbCp2)            bPopCp.remove_widget(tbCp3)            bPopCp.remove_widget(lblnotice)            bPopCp.remove_widget(lblblank)        def popnamedismiss(self,*args):            if tbName.text in ['',' ']:                pass            else:                cursor.execute("INSERT INTO user_account(name) VALUES('"+str(tbName.text) +"')" )                con.commit()                popupname.dismiss()                bPopName.remove_widget(lblname)                bPopName.remove_widget(tbName)                bPopName.remove_widget(buttonPopName)                popgender()                #popPin()        def savepoppin(self, *args):            cursor.execute("SELECT id from user_account")            tmp_pass = cursor.fetchone()[0]            con.commit()            if tbPin1.text == tbPin2.text:                if tbPin1.text in ['',' ']:                    pass                else:                    cursor.execute("UPDATE user_account SET password=? WHERE id=?",(str(tbPin1.text),tmp_pass))                    con.commit()                    bPopPin.remove_widget(tbPin1)                    bPopPin.remove_widget(lblPin)                    bPopPin.remove_widget(lblPin2)                    bPopPin.remove_widget(tbPin2)                    bPopPin.remove_widget(lblDum)                    bPopPin.remove_widget(buttonPopPin)                    popupPin.dismiss()            else:                print 'mali pass'                pass                    #Define Change Password Function            def popcpsave(self,*args):                        cursor.execute("SELECT * FROM user_account")            temp_pass = cursor.fetchall()            con.commit()            #print temp_pass[0][1]            if tbCp1.text == temp_pass[0][1]:                if tbCp2.text == tbCp3.text:                    if tbCp2.text and tbCp3.text == None or len(tbCp2.text) <=3:                        pass                    else:                        cursor.execute("UPDATE user_account SET password=? WHERE id=?",(str(tbCp2.text),temp_pass[0][0] ))                        con.commit()                        #print 'oki doki'                        popupCp.dismiss()                        tbCp1.text=""                        tbCp2.text=""                        tbCp3.text=""                        bPopCp.remove_widget(buttonPopCp)                        bPopCp.remove_widget(buttonPopCpExit)                        bPopCp.remove_widget(lblCp1)                        bPopCp.remove_widget(lblCp2)                        bPopCp.remove_widget(lblCp3)                        bPopCp.remove_widget(tbCp1)                        bPopCp.remove_widget(tbCp2)                        bPopCp.remove_widget(tbCp3)                        bPopCp.remove_widget(lblnotice)                        bPopCp.remove_widget(lblblank)            else:                lblnotice.markup = True                lblblank.markup = True                lblnotice.text="[color=ff00ff][b]PINS DOES NOT MATCH![/b][/color]"                lblblank.text="[color=ff00ff][b]ERROR:[/b][/color]"                #print 'mali'                            def callbackhome(self,*args):            sm.transition = SwapTransition()            sm.current='sixthscreen'            mooddismiss()            root4.remove_widget(boxStats)            root4.remove_widget(btnCont)                        root4.remove_widget(petalG)            root4.remove_widget(lblDescript)            root4.remove_widget(lblTemp)            root4.remove_widget(scrollData)            scrollData.remove_widget(gridData)                                    boxStats.remove_widget(nGraph)            root4.remove_widget(boxStats)            removebatt()            root6time.text="[color=ffffff]"+datetime.datetime.now().strftime('%I:%M ')+"[/color]"            root6batt.text="[color=ffffff][b]"+str(battery.status['percentage'])+"%[/b][/color]"            root6lbldate.text="[color=ffffff]"+datetime.datetime.now().strftime('%A %d %B %Y')+"[/color]"            addbatt()            popupsave.dismiss()            bPopSave.remove_widget(buttonPopSave)            bPopSave.remove_widget(lblsave)                                def callbacksc6(self,*args):            sm.transition = SwapTransition()            sm.current='sixthscreen'                    def callbackscmain(self,*args):            sm.transition = SwapTransition()            sm.current='mainscreen'            feedremove()            screenmain()                                            def exitclose(self,*args):            App.get_running_app().stop()        #Define Mood Confirm Function        def moodconfirm(self,*args):            popup3.dismiss()        #color_schemes        def colorRed(self,*args):            color_val = 'red'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/red.jpg"            btnHelpGraph.background_normal="img/red.jpg"                buttonPop.background_normal="img/red.jpg"            titlewrite.background_down="img/red.jpg"            logsTitle.background_down="img/red.jpg"            recentTitle.background_down="img/red.jpg"            statsTitle.background_down="img/red.jpg"            root6Title.background_down="img/red.jpg"            root6Title.background_normal="img/red.jpg"            buttonPopExit1.background_normal="img/red.jpg"            buttonPopExit2.background_normal="img/red.jpg"            buttonPop.background_normal="img/red.jpg"            buttonPopAb.background_normal="img/red.jpg"            buttonPopD.background_normal="img/red.jpg"            buttonPopName.background_normal="img/red.jpg"            buttonPopCpExit.background_normal="img/red.jpg"            btnCP.background_normal="img/red.jpg"            btnCons.background_normal="img/red.jpg"            btnHelp.background_normal="img/red.jpg"            btnColor.background_normal="img/red.jpg"            btnD.background_normal="img/red.jpg"            btnA.background_normal="img/red.jpg"            btnLO.background_normal="img/red.jpg"            mainbutton.background_normal="img/red.jpg"            buttonPopName.background_normal="img/red.jpg"            btnDaily.background_normal="img/red.jpg"            btnWeekly.background_normal="img/red.jpg"            btnMonthly.background_normal="img/red.jpg"            btnAnnual.background_normal="img/red.jpg"            graphButton.background_normal="img/red.jpg"            b_sc4menu.background_normal="img/red.jpg"            statsTitle.background_normal="img/red.jpg"            btnd1.background_normal="img/red.jpg"            btnd2.background_normal="img/red.jpg"            btnDayDay.background_normal="img/red.jpg"            btndy1.background_normal="img/red.jpg"            btndy2.background_normal="img/red.jpg"            btnYearDay.background_normal="img/red.jpg"            btnmy11.background_normal="img/red.jpg"            btnmy22.background_normal="img/red.jpg"            btnMonthDay.background_normal="img/red.jpg"            btnwd1.background_normal="img/red.jpg"            btnWeekDay.background_normal="img/red.jpg"            btnwy1.background_normal="img/red.jpg"            btnWeekYear.background_normal="img/red.jpg"            btnwm1.background_normal="img/red.jpg"            btnWeekMonth.background_normal="img/red.jpg"            btnmm1.background_normal="img/red.jpg"            btnmm2.background_normal="img/red.jpg"            btnmy1.background_normal="img/red.jpg"            btnmy2.background_normal="img/red.jpg"            btnMon1.background_normal="img/red.jpg"            btnMon2.background_normal="img/red.jpg"            btnann1.background_normal="img/red.jpg"            btnAnnualYear.background_normal="img/red.jpg"            b_scmainmenu.background_normal="img/red.jpg"            logsTitle.background_normal="img/red.jpg"            b_sc5menu.background_normal="img/red.jpg"            recentTitle.background_normal="img/red.jpg"            b_sc3menu.background_normal="img/red.jpg"            buttonPopSave.background_normal="img/red.jpg"             b_sc3.background_normal="img/red.jpg"            titlewrite.background_normal="img/red.jpg"            btnSlider.background_normal="img/red.jpg"            buttonPopCp.background_normal="img/red.jpg"            b_home.text="[color=ff0000]D[/color]"            lblHome.text="[color=ff0000][b]Home[/b][/color]"        def colorBlue(self,*args):            color_val = 'blue'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/blue.jpg"            btnHelpGraph.background_normal="img/blue.jpg"            buttonPop.background_down="img/blue.jpg"            titlewrite.background_down="img/blue.jpg"            logsTitle.background_down="img/blue.jpg"            recentTitle.background_down="img/blue.jpg"            statsTitle.background_down="img/blue.jpg"            root6Title.background_down="img/blue.jpg"            root6Title.background_normal="img/blue.jpg"            buttonPopExit1.background_normal="img/blue.jpg"            buttonPopExit2.background_normal="img/blue.jpg"            buttonPop.background_normal="img/blue.jpg"            buttonPopAb.background_normal="img/blue.jpg"            buttonPopD.background_normal="img/blue.jpg"            buttonPopName.background_normal="img/blue.jpg"            buttonPopCpExit.background_normal="img/blue.jpg"            btnCP.background_normal="img/blue.jpg"            btnCons.background_normal="img/blue.jpg"            btnHelp.background_normal="img/blue.jpg"            btnColor.background_normal="img/blue.jpg"            btnD.background_normal="img/blue.jpg"            btnA.background_normal="img/blue.jpg"            btnLO.background_normal="img/blue.jpg"            mainbutton.background_normal="img/blue.jpg"            buttonPopName.background_normal="img/blue.jpg"            btnDaily.background_normal="img/blue.jpg"            btnWeekly.background_normal="img/blue.jpg"            btnMonthly.background_normal="img/blue.jpg"            btnAnnual.background_normal="img/blue.jpg"            graphButton.background_normal="img/blue.jpg"            b_sc4menu.background_normal="img/blue.jpg"            statsTitle.background_normal="img/blue.jpg"            btnd1.background_normal="img/blue.jpg"            btnd2.background_normal="img/blue.jpg"            btnDayDay.background_normal="img/blue.jpg"            btndy1.background_normal="img/blue.jpg"            btndy2.background_normal="img/blue.jpg"            btnYearDay.background_normal="img/blue.jpg"            btnmy11.background_normal="img/blue.jpg"            btnmy22.background_normal="img/blue.jpg"            btnMonthDay.background_normal="img/blue.jpg"            btnwd1.background_normal="img/blue.jpg"            btnWeekDay.background_normal="img/blue.jpg"            btnwy1.background_normal="img/blue.jpg"            btnWeekYear.background_normal="img/blue.jpg"            btnwm1.background_normal="img/blue.jpg"            btnWeekMonth.background_normal="img/blue.jpg"            btnmm1.background_normal="img/blue.jpg"            btnmm2.background_normal="img/blue.jpg"            btnmy1.background_normal="img/blue.jpg"            btnmy2.background_normal="img/blue.jpg"            btnMon1.background_normal="img/blue.jpg"            btnMon2.background_normal="img/blue.jpg"            btnann1.background_normal="img/blue.jpg"            btnAnnualYear.background_normal="img/blue.jpg"            b_scmainmenu.background_normal="img/blue.jpg"            logsTitle.background_normal="img/blue.jpg"            b_sc5menu.background_normal="img/blue.jpg"            recentTitle.background_normal="img/blue.jpg"            b_sc3menu.background_normal="img/blue.jpg"            buttonPopSave.background_normal="img/blue.jpg"             b_sc3.background_normal="img/blue.jpg"            titlewrite.background_normal="img/blue.jpg"            btnSlider.background_normal="img/blue.jpg"            buttonPopCp.background_normal="img/blue.jpg"            b_home.text="[color=3b5999]D[/color]"            lblHome.text="[color=3b5999][b]Home[/b][/color]"        def colorGreen(self,*args):            color_val = 'green'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/green.jpg"            btnHelpGraph.background_normal="img/green.jpg"            buttonPop.background_down="img/green.jpg"            titlewrite.background_down="img/green.jpg"            logsTitle.background_down="img/green.jpg"            recentTitle.background_down="img/green.jpg"            statsTitle.background_down="img/green.jpg"            root6Title.background_down="img/green.jpg"            root6Title.background_normal="img/green.jpg"            buttonPopExit1.background_normal="img/green.jpg"            buttonPopExit2.background_normal="img/green.jpg"            buttonPop.background_normal="img/green.jpg"            buttonPopAb.background_normal="img/green.jpg"            buttonPopD.background_normal="img/green.jpg"            buttonPopName.background_normal="img/green.jpg"            buttonPopCpExit.background_normal="img/green.jpg"            btnCP.background_normal="img/green.jpg"            btnCons.background_normal="img/green.jpg"            btnHelp.background_normal="img/green.jpg"            btnColor.background_normal="img/green.jpg"            btnD.background_normal="img/green.jpg"            btnA.background_normal="img/green.jpg"            btnLO.background_normal="img/green.jpg"            mainbutton.background_normal="img/green.jpg"            buttonPopName.background_normal="img/green.jpg"            btnDaily.background_normal="img/green.jpg"            btnWeekly.background_normal="img/green.jpg"            btnMonthly.background_normal="img/green.jpg"            btnAnnual.background_normal="img/green.jpg"            graphButton.background_normal="img/green.jpg"            b_sc4menu.background_normal="img/green.jpg"            statsTitle.background_normal="img/green.jpg"            btnd1.background_normal="img/green.jpg"            btnd2.background_normal="img/green.jpg"            btnDayDay.background_normal="img/green.jpg"            btndy1.background_normal="img/green.jpg"            btndy2.background_normal="img/green.jpg"            btnYearDay.background_normal="img/green.jpg"            btnmy11.background_normal="img/green.jpg"            btnmy22.background_normal="img/green.jpg"            btnMonthDay.background_normal="img/green.jpg"            btnwd1.background_normal="img/green.jpg"            btnWeekDay.background_normal="img/green.jpg"            btnwy1.background_normal="img/green.jpg"            btnWeekYear.background_normal="img/green.jpg"            btnwm1.background_normal="img/green.jpg"            btnWeekMonth.background_normal="img/green.jpg"            btnmm1.background_normal="img/green.jpg"            btnmm2.background_normal="img/green.jpg"            btnmy1.background_normal="img/green.jpg"            btnmy2.background_normal="img/green.jpg"            btnMon1.background_normal="img/green.jpg"            btnMon2.background_normal="img/green.jpg"            btnann1.background_normal="img/green.jpg"            btnAnnualYear.background_normal="img/green.jpg"            b_scmainmenu.background_normal="img/green.jpg"            logsTitle.background_normal="img/green.jpg"            b_sc5menu.background_normal="img/green.jpg"            recentTitle.background_normal="img/green.jpg"            b_sc3menu.background_normal="img/green.jpg"            buttonPopSave.background_normal="img/green.jpg"             b_sc3.background_normal="img/green.jpg"            titlewrite.background_normal="img/green.jpg"            btnSlider.background_normal="img/green.jpg"            buttonPopCp.background_normal="img/green.jpg"            b_home.text="[color=00ff00]D[/color]"            lblHome.text="[color=00ff00][b]Home[/b][/color]"        def colorOrange(self,*args):            color_val = 'orange'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/orange.jpg"            btnHelpGraph.background_normal="img/orange.jpg"            buttonPop.background_down="img/orange.jpg"            titlewrite.background_down="img/orange.jpg"            logsTitle.background_down="img/orange.jpg"            recentTitle.background_down="img/orange.jpg"            statsTitle.background_down="img/orange.jpg"            root6Title.background_down="img/orange.jpg"            root6Title.background_normal="img/orange.jpg"            buttonPopExit1.background_normal="img/orange.jpg"            buttonPopExit2.background_normal="img/orange.jpg"            buttonPop.background_normal="img/orange.jpg"            buttonPopAb.background_normal="img/orange.jpg"            buttonPopD.background_normal="img/orange.jpg"            buttonPopName.background_normal="img/orange.jpg"            buttonPopCpExit.background_normal="img/orange.jpg"            btnCP.background_normal="img/orange.jpg"            btnCons.background_normal="img/orange.jpg"            btnHelp.background_normal="img/orange.jpg"            btnColor.background_normal="img/orange.jpg"            btnD.background_normal="img/orange.jpg"            btnA.background_normal="img/orange.jpg"            btnLO.background_normal="img/orange.jpg"            mainbutton.background_normal="img/orange.jpg"            buttonPopName.background_normal="img/orange.jpg"            btnDaily.background_normal="img/orange.jpg"            btnWeekly.background_normal="img/orange.jpg"            btnMonthly.background_normal="img/orange.jpg"            btnAnnual.background_normal="img/orange.jpg"            graphButton.background_normal="img/orange.jpg"            b_sc4menu.background_normal="img/orange.jpg"            statsTitle.background_normal="img/orange.jpg"            btnd1.background_normal="img/orange.jpg"            btnd2.background_normal="img/orange.jpg"            btnDayDay.background_normal="img/orange.jpg"            btndy1.background_normal="img/orange.jpg"            btndy2.background_normal="img/orange.jpg"            btnYearDay.background_normal="img/orange.jpg"            btnmy11.background_normal="img/orange.jpg"            btnmy22.background_normal="img/orange.jpg"            btnMonthDay.background_normal="img/orange.jpg"            btnwd1.background_normal="img/orange.jpg"            btnWeekDay.background_normal="img/orange.jpg"            btnwy1.background_normal="img/orange.jpg"            btnWeekYear.background_normal="img/orange.jpg"            btnwm1.background_normal="img/orange.jpg"            btnWeekMonth.background_normal="img/orange.jpg"            btnmm1.background_normal="img/orange.jpg"            btnmm2.background_normal="img/orange.jpg"            btnmy1.background_normal="img/orange.jpg"            btnmy2.background_normal="img/orange.jpg"            btnMon1.background_normal="img/orange.jpg"            btnann1.background_normal="img/orange.jpg"            btnAnnualYear.background_normal="img/orange.jpg"            b_scmainmenu.background_normal="img/orange.jpg"            logsTitle.background_normal="img/orange.jpg"            b_sc5menu.background_normal="img/orange.jpg"            recentTitle.background_normal="img/orange.jpg"            b_sc3menu.background_normal="img/orange.jpg"            buttonPopSave.background_normal="img/orange.jpg"             b_sc3.background_normal="img/orange.jpg"            titlewrite.background_normal="img/orange.jpg"            btnSlider.background_normal="img/orange.jpg"            buttonPopCp.background_normal="img/orange.jpg"            b_home.text="[color=ff4500]D[/color]"            lblHome.text="[color=ff4500][b]Home[/b][/color]"        def colorPurple(self,*args):            color_val = 'purple'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/purple.jpg"            btnHelpGraph.background_normal="img/purple.jpg"            buttonPop.background_normal="img/purple.jpg"                                    titlewrite.background_down="img/purple.jpg"            logsTitle.background_down="img/purple.jpg"            recentTitle.background_down="img/purple.jpg"            statsTitle.background_down="img/purple.jpg"            root6Title.background_down="img/purple.jpg"            root6Title.background_normal="img/purple.jpg"            buttonPopExit1.background_normal="img/purple.jpg"            buttonPopExit2.background_normal="img/purple.jpg"            buttonPop.background_normal="img/purple.jpg"            buttonPopAb.background_normal="img/purple.jpg"            buttonPopD.background_normal="img/purple.jpg"            buttonPopName.background_normal="img/purple.jpg"            buttonPopCpExit.background_normal="img/purple.jpg"            btnCP.background_normal="img/purple.jpg"            btnCons.background_normal="img/purple.jpg"            btnHelp.background_normal="img/purple.jpg"            btnColor.background_normal="img/purple.jpg"            btnD.background_normal="img/purple.jpg"            btnA.background_normal="img/purple.jpg"            btnLO.background_normal="img/purple.jpg"            mainbutton.background_normal="img/purple.jpg"            buttonPopName.background_normal="img/purple.jpg"            btnDaily.background_normal="img/purple.jpg"            btnWeekly.background_normal="img/purple.jpg"            btnMonthly.background_normal="img/purple.jpg"            btnAnnual.background_normal="img/purple.jpg"            graphButton.background_normal="img/purple.jpg"            b_sc4menu.background_normal="img/purple.jpg"            statsTitle.background_normal="img/purple.jpg"            btnd1.background_normal="img/purple.jpg"            btnd2.background_normal="img/purple.jpg"            btnDayDay.background_normal="img/purple.jpg"            btndy1.background_normal="img/purple.jpg"            btndy2.background_normal="img/purple.jpg"            btnYearDay.background_normal="img/purple.jpg"            btnmy11.background_normal="img/purple.jpg"            btnmy22.background_normal="img/purple.jpg"            btnMonthDay.background_normal="img/purple.jpg"            btnwd1.background_normal="img/purple.jpg"            btnWeekDay.background_normal="img/purple.jpg"            btnwy1.background_normal="img/purple.jpg"            btnWeekYear.background_normal="img/purple.jpg"            btnwm1.background_normal="img/purple.jpg"            btnWeekMonth.background_normal="img/purple.jpg"            btnmm1.background_normal="img/purple.jpg"            btnmm2.background_normal="img/purple.jpg"            btnmy1.background_normal="img/purple.jpg"            btnmy2.background_normal="img/purple.jpg"            btnMon1.background_normal="img/purple.jpg"            btnann1.background_normal="img/purple.jpg"            btnAnnualYear.background_normal="img/purple.jpg"            b_scmainmenu.background_normal="img/purple.jpg"            logsTitle.background_normal="img/purple.jpg"            b_sc5menu.background_normal="img/purple.jpg"            recentTitle.background_normal="img/purple.jpg"            b_sc3menu.background_normal="img/purple.jpg"            buttonPopSave.background_normal="img/purple.jpg"             b_sc3.background_normal="img/purple.jpg"            titlewrite.background_normal="img/purple.jpg"            btnSlider.background_normal="img/purple.jpg"            buttonPopCp.background_normal="img/purple.jpg"            b_home.text="[color=ba55d3]D[/color]"            lblHome.text="[color=ba55d3][b]Home[/b][/color]"        def colorPRed(self,*args):            color_val = 'pred'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/pred.jpg"            btnHelpGraph.background_normal="img/pred.jpg"            buttonPop.background_down="img/pred.jpg"            titlewrite.background_down="img/pred.jpg"            logsTitle.background_down="img/pred.jpg"            recentTitle.background_down="img/pred.jpg"            statsTitle.background_down="img/pred.jpg"            root6Title.background_down="img/pred.jpg"            root6Title.background_normal="img/pred.jpg"            buttonPopExit1.background_normal="img/pred.jpg"            buttonPopExit2.background_normal="img/pred.jpg"            buttonPop.background_normal="img/pred.jpg"            buttonPopAb.background_normal="img/pred.jpg"            buttonPopD.background_normal="img/pred.jpg"            buttonPopName.background_normal="img/pred.jpg"            buttonPopCpExit.background_normal="img/pred.jpg"            btnCP.background_normal="img/pred.jpg"            btnCons.background_normal="img/pred.jpg"            btnHelp.background_normal="img/pred.jpg"            btnColor.background_normal="img/pred.jpg"            btnD.background_normal="img/pred.jpg"            btnA.background_normal="img/pred.jpg"            btnLO.background_normal="img/pred.jpg"            mainbutton.background_normal="img/pred.jpg"            buttonPopName.background_normal="img/pred.jpg"            btnDaily.background_normal="img/pred.jpg"            btnWeekly.background_normal="img/pred.jpg"            btnMonthly.background_normal="img/pred.jpg"            btnAnnual.background_normal="img/pred.jpg"            graphButton.background_normal="img/pred.jpg"            b_sc4menu.background_normal="img/pred.jpg"            statsTitle.background_normal="img/pred.jpg"            btnd1.background_normal="img/pred.jpg"            btnd2.background_normal="img/pred.jpg"            btnDayDay.background_normal="img/pred.jpg"            btndy1.background_normal="img/pred.jpg"            btndy2.background_normal="img/pred.jpg"            btnYearDay.background_normal="img/pred.jpg"            btnmy11.background_normal="img/pred.jpg"            btnmy22.background_normal="img/pred.jpg"            btnMonthDay.background_normal="img/pred.jpg"            btnwd1.background_normal="img/pred.jpg"            btnWeekDay.background_normal="img/pred.jpg"            btnwy1.background_normal="img/pred.jpg"            btnWeekYear.background_normal="img/pred.jpg"            btnwm1.background_normal="img/pred.jpg"            btnWeekMonth.background_normal="img/pred.jpg"            btnmm1.background_normal="img/pred.jpg"            btnmm2.background_normal="img/pred.jpg"            btnmy1.background_normal="img/pred.jpg"            btnmy2.background_normal="img/pred.jpg"            btnMon1.background_normal="img/pred.jpg"            btnMon2.background_normal="img/pred.jpg"            btnann1.background_normal="img/pred.jpg"            btnAnnualYear.background_normal="img/pred.jpg"            b_scmainmenu.background_normal="img/pred.jpg"            logsTitle.background_normal="img/pred.jpg"            b_sc5menu.background_normal="img/pred.jpg"            recentTitle.background_normal="img/pred.jpg"            b_sc3menu.background_normal="img/pred.jpg"            buttonPopSave.background_normal="img/pred.jpg"             b_sc3.background_normal="img/pred.jpg"            titlewrite.background_normal="img/pred.jpg"            btnSlider.background_normal="img/pred.jpg"            buttonPopCp.background_normal="img/pred.jpg"            b_home.text="[color=ffb4bb]D[/color]"            lblHome.text="[color=ffb4bb][b]Home[/b][/color]"        def colorPBlue(self,*args):            color_val = 'pblue'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/pblue.jpg"            btnHelpGraph.background_normal="img/pblue.jpg"            buttonPop.background_down="img/pblue.jpg"            titlewrite.background_down="img/pblue.jpg"            logsTitle.background_down="img/pblue.jpg"            recentTitle.background_down="img/pblue.jpg"            statsTitle.background_down="img/pblue.jpg"            root6Title.background_down="img/pblue.jpg"            root6Title.background_normal="img/pblue.jpg"            buttonPopExit1.background_normal="img/pblue.jpg"            buttonPopExit2.background_normal="img/pblue.jpg"            buttonPop.background_normal="img/pblue.jpg"            buttonPopAb.background_normal="img/pblue.jpg"            buttonPopD.background_normal="img/pblue.jpg"            buttonPopName.background_normal="img/pblue.jpg"            buttonPopCpExit.background_normal="img/pblue.jpg"            btnCP.background_normal="img/pblue.jpg"            btnCons.background_normal="img/pblue.jpg"            btnHelp.background_normal="img/pblue.jpg"            btnColor.background_normal="img/pblue.jpg"            btnD.background_normal="img/pblue.jpg"            btnA.background_normal="img/pblue.jpg"            btnLO.background_normal="img/pblue.jpg"            mainbutton.background_normal="img/pblue.jpg"            buttonPopName.background_normal="img/pblue.jpg"            btnDaily.background_normal="img/pblue.jpg"            btnWeekly.background_normal="img/pblue.jpg"            btnMonthly.background_normal="img/pblue.jpg"            btnAnnual.background_normal="img/pblue.jpg"            graphButton.background_normal="img/pblue.jpg"            b_sc4menu.background_normal="img/pblue.jpg"            statsTitle.background_normal="img/pblue.jpg"            btnd1.background_normal="img/pblue.jpg"            btnd2.background_normal="img/pblue.jpg"            btnDayDay.background_normal="img/pblue.jpg"            btndy1.background_normal="img/pblue.jpg"            btndy2.background_normal="img/pblue.jpg"            btnYearDay.background_normal="img/pblue.jpg"            btnmy11.background_normal="img/pblue.jpg"            btnmy22.background_normal="img/pblue.jpg"            btnMonthDay.background_normal="img/pblue.jpg"            btnwd1.background_normal="img/pblue.jpg"            btnWeekDay.background_normal="img/pblue.jpg"            btnwy1.background_normal="img/pblue.jpg"            btnWeekYear.background_normal="img/pblue.jpg"            btnwm1.background_normal="img/pblue.jpg"            btnWeekMonth.background_normal="img/pblue.jpg"            btnmm1.background_normal="img/pblue.jpg"            btnmm2.background_normal="img/pblue.jpg"            btnmy1.background_normal="img/pblue.jpg"            btnmy2.background_normal="img/pblue.jpg"            btnMon1.background_normal="img/pblue.jpg"            btnMon2.background_normal="img/pblue.jpg"            btnann1.background_normal="img/pblue.jpg"            btnAnnualYear.background_normal="img/pblue.jpg"            b_scmainmenu.background_normal="img/pblue.jpg"            logsTitle.background_normal="img/pblue.jpg"            b_sc5menu.background_normal="img/pblue.jpg"            recentTitle.background_normal="img/pblue.jpg"            b_sc3menu.background_normal="img/pblue.jpg"            buttonPopSave.background_normal="img/pblue.jpg"             b_sc3.background_normal="img/pblue.jpg"            titlewrite.background_normal="img/pblue.jpg"            btnSlider.background_normal="img/pblue.jpg"            buttonPopCp.background_normal="img/pblue.jpg"            b_home.text="[color=88cafd]D[/color]"            lblHome.text="[color=88cafd][b]Home[/b][/color]"        def colorPGreen(self,*args):            color_val = 'pgreen'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/pgreen.jpg"            btnHelpGraph.background_normal="img/pgreen.jpg"            buttonPop.background_down="img/pgreen.jpg"            titlewrite.background_down="img/pgreen.jpg"            logsTitle.background_down="img/pgreen.jpg"            recentTitle.background_down="img/pgreen.jpg"            statsTitle.background_down="img/pgreen.jpg"            root6Title.background_down="img/pgreen.jpg"            root6Title.background_normal="img/pgreen.jpg"            buttonPopExit1.background_normal="img/pgreen.jpg"            buttonPopExit2.background_normal="img/pgreen.jpg"            buttonPop.background_normal="img/pgreen.jpg"            buttonPopAb.background_normal="img/pgreen.jpg"            buttonPopD.background_normal="img/pgreen.jpg"            buttonPopName.background_normal="img/pgreen.jpg"            buttonPopCpExit.background_normal="img/pgreen.jpg"            btnCP.background_normal="img/pgreen.jpg"            btnCons.background_normal="img/pgreen.jpg"            btnHelp.background_normal="img/pgreen.jpg"            btnColor.background_normal="img/pgreen.jpg"            btnD.background_normal="img/pgreen.jpg"            btnA.background_normal="img/pgreen.jpg"            btnLO.background_normal="img/pgreen.jpg"            mainbutton.background_normal="img/pgreen.jpg"            buttonPopName.background_normal="img/pgreen.jpg"            btnDaily.background_normal="img/pgreen.jpg"            btnWeekly.background_normal="img/pgreen.jpg"            btnMonthly.background_normal="img/pgreen.jpg"            btnAnnual.background_normal="img/pgreen.jpg"            graphButton.background_normal="img/pgreen.jpg"            b_sc4menu.background_normal="img/pgreen.jpg"            statsTitle.background_normal="img/pgreen.jpg"            btnd1.background_normal="img/pgreen.jpg"            btnd2.background_normal="img/pgreen.jpg"            btnDayDay.background_normal="img/pgreen.jpg"            btndy1.background_normal="img/pgreen.jpg"            btndy2.background_normal="img/pgreen.jpg"            btnYearDay.background_normal="img/pgreen.jpg"            btnmy11.background_normal="img/pgreen.jpg"            btnmy22.background_normal="img/pgreen.jpg"            btnMonthDay.background_normal="img/pgreen.jpg"            btnwd1.background_normal="img/pgreen.jpg"            btnWeekDay.background_normal="img/pgreen.jpg"            btnwy1.background_normal="img/pgreen.jpg"            btnWeekYear.background_normal="img/pgreen.jpg"            btnwm1.background_normal="img/pgreen.jpg"            btnWeekMonth.background_normal="img/pgreen.jpg"            btnmm1.background_normal="img/pgreen.jpg"            btnmm2.background_normal="img/pgreen.jpg"            btnmy1.background_normal="img/pgreen.jpg"            btnmy2.background_normal="img/pgreen.jpg"            btnMon1.background_normal="img/pgreen.jpg"            btnMon2.background_normal="img/pgreen.jpg"            btnann1.background_normal="img/pgreen.jpg"            btnAnnualYear.background_normal="img/pgreen.jpg"            b_scmainmenu.background_normal="img/pgreen.jpg"            logsTitle.background_normal="img/pgreen.jpg"            b_sc5menu.background_normal="img/pgreen.jpg"            recentTitle.background_normal="img/pgreen.jpg"            b_sc3menu.background_normal="img/pgreen.jpg"            buttonPopSave.background_normal="img/pgreen.jpg"             b_sc3.background_normal="img/pgreen.jpg"            titlewrite.background_normal="img/pgreen.jpg"            btnSlider.background_normal="img/pgreen.jpg"            buttonPopCp.background_normal="img/pgreen.jpg"            b_home.text="[color=7ffe9a]D[/color]"            lblHome.text="[color=7ffe9a][b]Home[/b][/color]"        def colorPOrange(self,*args):            color_val = 'porange'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/porange.jpg"            btnHelpGraph.background_normal="img/porange.jpg"            buttonPop.background_down="img/porange.jpg"            titlewrite.background_down="img/porange.jpg"            logsTitle.background_down="img/porange.jpg"            recentTitle.background_down="img/porange.jpg"            statsTitle.background_down="img/porange.jpg"            root6Title.background_down="img/porange.jpg"            root6Title.background_normal="img/porange.jpg"            buttonPopExit1.background_normal="img/porange.jpg"            buttonPopExit2.background_normal="img/porange.jpg"            buttonPop.background_normal="img/porange.jpg"            buttonPopAb.background_normal="img/porange.jpg"            buttonPopD.background_normal="img/porange.jpg"            buttonPopName.background_normal="img/porange.jpg"            buttonPopCpExit.background_normal="img/porange.jpg"            btnCP.background_normal="img/porange.jpg"            btnCons.background_normal="img/porange.jpg"            btnHelp.background_normal="img/porange.jpg"            btnColor.background_normal="img/porange.jpg"            btnD.background_normal="img/porange.jpg"            btnA.background_normal="img/porange.jpg"            btnLO.background_normal="img/porange.jpg"            mainbutton.background_normal="img/porange.jpg"            buttonPopName.background_normal="img/porange.jpg"            btnDaily.background_normal="img/porange.jpg"            btnWeekly.background_normal="img/porange.jpg"            btnMonthly.background_normal="img/porange.jpg"            btnAnnual.background_normal="img/porange.jpg"            graphButton.background_normal="img/porange.jpg"            b_sc4menu.background_normal="img/porange.jpg"            statsTitle.background_normal="img/porange.jpg"            btnd1.background_normal="img/porange.jpg"            btnd2.background_normal="img/porange.jpg"            btnDayDay.background_normal="img/porange.jpg"            btndy1.background_normal="img/porange.jpg"            btndy2.background_normal="img/porange.jpg"            btnYearDay.background_normal="img/porange.jpg"            btnmy11.background_normal="img/porange.jpg"            btnmy22.background_normal="img/porange.jpg"            btnMonthDay.background_normal="img/porange.jpg"            btnwd1.background_normal="img/porange.jpg"            btnWeekDay.background_normal="img/porange.jpg"            btnwy1.background_normal="img/porange.jpg"            btnWeekYear.background_normal="img/porange.jpg"            btnwm1.background_normal="img/porange.jpg"            btnWeekMonth.background_normal="img/porange.jpg"            btnmm1.background_normal="img/porange.jpg"            btnmm2.background_normal="img/porange.jpg"            btnmy1.background_normal="img/porange.jpg"            btnmy2.background_normal="img/porange.jpg"            btnMon1.background_normal="img/porange.jpg"            btnann1.background_normal="img/porange.jpg"            btnAnnualYear.background_normal="img/porange.jpg"            b_scmainmenu.background_normal="img/porange.jpg"            logsTitle.background_normal="img/porange.jpg"            b_sc5menu.background_normal="img/porange.jpg"            recentTitle.background_normal="img/porange.jpg"            b_sc3menu.background_normal="img/porange.jpg"            buttonPopSave.background_normal="img/porange.jpg"             b_sc3.background_normal="img/porange.jpg"            titlewrite.background_normal="img/porange.jpg"            btnSlider.background_normal="img/porange.jpg"            buttonPopCp.background_normal="img/porange.jpg"            b_home.text="[color=fec47e]D[/color]"            lblHome.text="[color=fec47e][b]Home[/b][/color]"        def colorPPurple(self,*args):            color_val = 'ppurple'            cursor.execute('SELECT COUNT(*) FROM color_tbl')            color_count = cursor.fetchone()[0]            if color_count == 0:                cursor.execute("INSERT INTO color_tbl(color) VALUES('"+color_val+"')")                con.commit()            elif color_count >= 1:                    cursor.execute("UPDATE color_tbl SET color='"+color_val+"'")                con.commit()            btnhelpmeok.background_normal="img/ppurple.jpg"            btnHelpGraph.background_normal="img/ppurple.jpg"            buttonPop.background_down="img/ppurple.jpg"            titlewrite.background_down="img/ppurple.jpg"            logsTitle.background_down="img/ppurple.jpg"            recentTitle.background_down="img/ppurple.jpg"            statsTitle.background_down="img/ppurple.jpg"            root6Title.background_down="img/ppurple.jpg"            root6Title.background_normal="img/ppurple.jpg"            buttonPopExit1.background_normal="img/ppurple.jpg"            buttonPopExit2.background_normal="img/ppurple.jpg"            buttonPop.background_normal="img/ppurple.jpg"            buttonPopAb.background_normal="img/ppurple.jpg"            buttonPopD.background_normal="img/ppurple.jpg"            buttonPopName.background_normal="img/ppurple.jpg"            buttonPopCpExit.background_normal="img/ppurple.jpg"            btnCP.background_normal="img/ppurple.jpg"            btnCons.background_normal="img/ppurple.jpg"            btnHelp.background_normal="img/ppurple.jpg"            btnColor.background_normal="img/ppurple.jpg"            btnD.background_normal="img/ppurple.jpg"            btnA.background_normal="img/ppurple.jpg"            btnLO.background_normal="img/ppurple.jpg"            mainbutton.background_normal="img/ppurple.jpg"            buttonPopName.background_normal="img/ppurple.jpg"            btnDaily.background_normal="img/ppurple.jpg"            btnWeekly.background_normal="img/ppurple.jpg"            btnMonthly.background_normal="img/ppurple.jpg"            btnAnnual.background_normal="img/ppurple.jpg"            graphButton.background_normal="img/ppurple.jpg"            b_sc4menu.background_normal="img/ppurple.jpg"            statsTitle.background_normal="img/ppurple.jpg"            btnd1.background_normal="img/ppurple.jpg"            btnd2.background_normal="img/ppurple.jpg"            btnDayDay.background_normal="img/ppurple.jpg"            btndy1.background_normal="img/ppurple.jpg"            btndy2.background_normal="img/ppurple.jpg"            btnYearDay.background_normal="img/ppurple.jpg"            btnmy11.background_normal="img/ppurple.jpg"            btnmy22.background_normal="img/ppurple.jpg"            btnMonthDay.background_normal="img/ppurple.jpg"            btnwd1.background_normal="img/ppurple.jpg"            btnWeekDay.background_normal="img/ppurple.jpg"            btnwy1.background_normal="img/ppurple.jpg"            btnWeekYear.background_normal="img/ppurple.jpg"            btnwm1.background_normal="img/ppurple.jpg"            btnWeekMonth.background_normal="img/ppurple.jpg"            btnmm1.background_normal="img/ppurple.jpg"            btnmm2.background_normal="img/ppurple.jpg"            btnmy1.background_normal="img/ppurple.jpg"            btnmy2.background_normal="img/ppurple.jpg"            btnMon1.background_normal="img/ppurple.jpg"            btnann1.background_normal="img/ppurple.jpg"            btnAnnualYear.background_normal="img/ppurple.jpg"            b_scmainmenu.background_normal="img/ppurple.jpg"            logsTitle.background_normal="img/ppurple.jpg"            b_sc5menu.background_normal="img/ppurple.jpg"            recentTitle.background_normal="img/ppurple.jpg"            b_sc3menu.background_normal="img/ppurple.jpg"            buttonPopSave.background_normal="img/ppurple.jpg"             b_sc3.background_normal="img/ppurple.jpg"            titlewrite.background_normal="img/ppurple.jpg"            btnSlider.background_normal="img/ppurple.jpg"            buttonPopCp.background_normal="img/ppurple.jpg"            b_home.text="[color=ba55d3]D[/color]"            lblHome.text="[color=ba55d3][b]Home[/b][/color]"        def colorClose(self,*args):            popupColor.dismiss()            popColorRemove()                    if color_val =='red':            b_home.text="[color=ff0000]D[/color]"            lblHome.text="[color=ff0000][b]Home[/b][/color]"        elif color_val == 'blue':            b_home.text="[color=3b5999]D[/color]"            lblHome.text="[color=3b5999][b]Home[/b][/color]"        elif color_val == 'green':            b_home.text="[color=00ff00]D[/color]"            lblHome.text="[color=00ff00][b]Home[/b][/color]"        elif color_val == 'orange':            b_home.text="[color=ff4500]D[/color]"            lblHome.text="[color=ff4500][b]Home[/b][/color]"        elif color_val == 'purple':            b_home.text="[color=ba55d3]D[/color]"            lblHome.text="[color=ba55d3][b]Home[/b][/color]"        elif color_val == 'pred':            b_home.text="[color=ffb4bb]D[/color]"            lblHome.text="[color=ffb4bb][b]Home[/b][/color]"        elif color_val == 'pblue':            b_home.text="[color=88cafd]D[/color]"            lblHome.text="[color=88cafd][b]Home[/b][/color]"        elif color_val == 'pgreen':            b_home.text="[color=7ffe9a]D[/color]"            lblHome.text="[color=7ffe9a][b]Home[/b][/color]"        elif color_val == 'porange':            b_home.text="[color=fec47e]D[/color]"            lblHome.text="[color=fec47e][b]Home[/b][/color]"        elif color_val == 'ppurple':            b_home.text="[color=ba55d3]D[/color]"            lblHome.text="[color=ba55d3][b]Home[/b][/color]"        #--BINDINGS---------------------        root.bind(on_touch_down=callbacksc2) # button tap event        passimgok.bind(on_release=callbackmain)        passimgok.bind(on_release=popError)        passimg0.bind(on_press=p0)        passimg1.bind(on_press=p1)        passimg2.bind(on_press=p2)        passimg3.bind(on_press=p3)        passimg4.bind(on_press=p4)        passimg5.bind(on_press=p5)        passimg6.bind(on_press=p6)        passimg7.bind(on_press=p7)        passimg8.bind(on_press=p8)        passimg9.bind(on_press=p9)        passimgclr.bind(on_press=pclr)        buttonPop.bind(on_press=popup.dismiss)        b_write.bind(on_press=callbacksc3)        b_sc3menu.bind(on_release=callbackhome)        b_stats.bind(on_release=callbacksc4)        b_user.bind(on_press=callbacksc7)        b_logs.bind(on_release=callbackscmain)        b_scmainmenu.bind(on_release=callbackhome)        b_sc4menu.bind(on_release=callbackhome)        b_sc7menu.bind(on_release=callbackhome)         b_sc3.bind(on_press=callback_proctext)        #slider        btnSlider.bind(on_press=moodconfirm)                #logout        btnLO.bind(on_press=popexit)        buttonPopExit1.bind(on_press=exitclose)         buttonPopExit2.bind(on_press=popexitdismiss)                #about        buttonPopAb.bind(on_press=popaboutdismiss)        btnA.bind(on_press=popabout)        #error        buttonPopError.bind(on_press=poperrordismiss)        #devs        buttonPopD.bind(on_press=popdevdismiss)        btnD.bind(on_press=popdev)        #change pass        buttonPopCpExit.bind(on_press=popcpdismiss)        buttonPopCp.bind(on_press=popcpsave)        btnCP.bind(on_press=popcp)        btnColor.bind(on_press=popColor)        #dismissnote        buttonPopSave.bind(on_press=callbackhome)        #nameinput        buttonPopName.bind(on_press=popnamedismiss)        #save Button Pop Pin        buttonPopPin.bind(on_press=savepoppin)        #remove widgets        b_stats.bind(on_release=rWidgets)        #graph plot        btnWeekly.bind(on_release=weeklyGraphPlot)        btnDaily.bind(on_release=dailyGraphPlot)        btnMonthly.bind(on_release=monthlyGraphPlot)        btnAnnual.bind(on_release=annualGraphPlot)        b_stats.bind(on_release=startGraphPlot)        graphButton.bind(on_press=removeDWM1)               #Graph Buttons List        #Daily        btnDaily.bind(on_release=daily_month)        btnDaily.bind(on_release=daily_year)        btnDaily.bind(on_release=daily_day)        #weekly        btnWeekly.bind(on_release=weekly_month)        btnWeekly.bind(on_release=weekly_year)        btnWeekly.bind(on_release=weekly_day)        #monthly        btnMonthly.bind(on_release=monthly_month)        btnMonthly.bind(on_release=monthly_year)        #monthly        btnAnnualYear.bind(on_release=yearly_year)                #color        buttonColorRed.bind(on_press=colorRed)        buttonColorBlue.bind(on_press=colorBlue)        buttonColorGreen.bind(on_press=colorGreen)        buttonColorOrange.bind(on_press=colorOrange)        buttonColorPurple.bind(on_press=colorPurple)        buttonColorPRed.bind(on_press=colorPRed)        buttonColorPBlue.bind(on_press=colorPBlue)        buttonColorPGreen.bind(on_press=colorPGreen)        buttonColorPOrange.bind(on_press=colorPOrange)        buttonColorPPurple.bind(on_press=colorPPurple)        buttonPopColor.bind(on_press=colorClose)        #gender        buttonPopGender1.bind(on_press=popGenderRemove1)        buttonPopGender2.bind(on_press=popGenderRemove2)        # disable Back button on Android        Window.bind(on_keyboard=self.hook_keyboard)        #consultant Mode        btnCons.bind(on_release=ConsultantMode)        #help        btnHelp.bind(on_release=MMHelp)                return sm    if __name__ == "__main__": #run the class    MainApp().run()    con.commit()